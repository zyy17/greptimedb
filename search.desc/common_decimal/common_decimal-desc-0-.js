searchState.loadedDescShard("common_decimal", 0, "The maximum bytes length that an accurate RustDecimal can …\nThe default scale for Decimal128 values\nThe maximum precision for Decimal128 values\nThe maximum scale for Decimal128 values\n128bit decimal, using the i128 to represent the decimal.\nPort from arrow-rs, see …\nReturns the argument unchanged.\nConvert from precision, scale, a i128 value which …\nCalls <code>U::from(self)</code>.\nCreate a new Decimal128 from i128, precision and scale …\nReturns the precision of this decimal.\nReturns the scale of this decimal.\nsplit the self.value(i128) to (high-64 bit, low-64 bit), …\nConvert to ScalarValue(value,precision,scale)\nTry new Decimal128 from i128, precision and scale with …\nReturn underlying value without precision and scale\ncheck whether precision and scale is valid\nSNAFU context selector for the <code>Error::BigDecimalOutOfRange</code> …\nContains the error value\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::ParseBigDecimalStr</code> …\nSNAFU context selector for the <code>Error::ParseRustDecimalStr</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")