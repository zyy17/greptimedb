searchState.loadedDescShard("common_grpc", 0, "A batch of Arrow data as part of a stream of batches.\nApplication-defined metadata.\nThe actual batch of Arrow data. Preferably handled with …\nHeader for message data as described in …\nThe descriptor of the data. This is only relevant when a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>FlightData</code>.\nAdd optional application specific metadata to the message\nAdd a data body. See <code>IpcDataGenerator</code> to create this data.\nAdd a data header\nAdd a <code>FlightDescriptor</code> describing the data\nSet the value of tls client auth.\nA concurrency limit to each request.\nA timeout to connecting to the uri.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets whether to use an adaptive flow control. Uses …\nSet http2 KEEP_ALIVE_INTERVAL. Uses hyper’s default …\nSet http2 KEEP_ALIVE_TIMEOUT. Uses hyper’s default …\nSet http2 KEEP_ALIVE_WHILE_IDLE. Uses hyper’s default …\nSets the max connection-level flow control for HTTP2\nSets the SETTINGS_INITIAL_WINDOW_SIZE option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA rate limit to each request.\nSet whether TCP keepalive messages are enabled on accepted …\nSet the value of TCP_NODELAY option for accepted …\nA timeout to each request.\nSNAFU context selector for the <code>Error::Arrow</code> variant\nSNAFU context selector for the <code>Error::Conversion</code> variant\nSNAFU context selector for the <code>Error::CreateChannel</code> variant\nSNAFU context selector for the <code>Error::DecodeFlightData</code> …\nContains the error value\nSNAFU context selector for the <code>Error::InvalidConfigFilePath</code>…\nSNAFU context selector for the <code>Error::InvalidFlightData</code> …\nSNAFU context selector for the <code>Error::InvalidTlsConfig</code> …\nSNAFU context selector for the <code>Error::NotSupported</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::TypeMismatch</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild a FlightDecoder instance from provided schema bytes.\nThe metadata for “DoPut” requests and responses.\nThe response in the “DoPut” returned stream.\nThe successfully ingested rows number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe same “request_id” in the request; see the …\nPrecision represents the precision of a timestamp. It is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")