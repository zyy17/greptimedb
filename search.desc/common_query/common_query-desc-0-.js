searchState.loadedDescShard("common_query", 0, "new Output struct with output data(previously Output) and …\nOriginal Output struct carrying result data to …\nOutputMeta stores meta information produced/generated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMay exist for query output. One can retrieve execution …\nSignature module contains foundational types that are used …\nRepresents the result from an expression\nA single value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a columnar value into an VectorRef\nSNAFU context selector for the <code>Error::ArrowCompute</code> variant\nSNAFU context selector for the <code>Error::BadAccumulatorImpl</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::CreateAccumulator</code> …\nSNAFU context selector for the <code>Error::DecodePlan</code> variant\nSNAFU context selector for the <code>Error::DowncastVector</code> …\nContains the error value\nSNAFU context selector for the <code>Error::Execute</code> variant\nSNAFU context selector for the <code>Error::FlownodeNotFound</code> …\nSNAFU context selector for the <code>Error::FromArrowArray</code> …\nSNAFU context selector for the <code>Error::FromScalarValue</code> …\nSNAFU context selector for the <code>Error::GeneralDataFusion</code> …\nSNAFU context selector for the <code>Error::GetScalarVector</code> …\nSNAFU context selector for the <code>Error::IntoVector</code> variant\nSNAFU context selector for the <code>Error::InvalidFuncArgs</code> …\nSNAFU context selector for the <code>Error::InvalidInputState</code> …\nSNAFU context selector for the <code>Error::InvalidInputType</code> …\nSNAFU context selector for the <code>Error::InvalidVectorString</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::PermissionDenied</code> …\nSNAFU context selector for the <code>Error::ProcedureService</code> …\nSNAFU context selector for the <code>Error::RegisterUdf</code> variant\nSNAFU context selector for the <code>Error::TableMutation</code> variant\nSNAFU context selector for the <code>Error::ToScalarValue</code> variant\nSNAFU context selector for the <code>Error::TypeCast</code> variant\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nTry to get the proper <code>StatusCode</code> of `DataFusionError.\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate Accumulator with the data type of input columns.\nAccumulator creator that will be used by DataFusion\nA function’s return type\nThis signature corresponds to which types an aggregator …\nLogical representation of a user-defined aggregate …\nThe datafusion <code>[LogicalPlan]</code> decoder.\nAccumulator module contains the trait definition for …\nactual implementation\ncreate a <code>insert into table_name &lt;input&gt;</code> logical plan\nConvert a insert into logical plan to an (table_name, …\nBuilds an <code>Expr</code> that filters timestamp column from given …\nBuilds a filter for a timestamp column with the same type …\nthe creator that creates aggregate functions\nDecode the <code>LogicalPlan</code> from bytes with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nname\nRename columns by applying a new projection. Returns an …\nReturn type\nsignature\nthe accumulator’s state’s description as a function of …\nUdaf module contains functions and structs supporting …\nAn accumulator represents a stateful object that lives …\n<code>AggrFuncTypeStore</code> stores the aggregate function’s input …\nAn <code>AggregateFunctionCreator</code> dynamically creates <code>Accumulator</code>…\nA wrapper type for our Accumulator to DataFusion’s …\nCreate a function that can create a new accumulator with …\nreturns its value based on its current state.\nReturns the argument unchanged.\nGet the input data types of the Accumulator.\nCalls <code>U::from(self)</code>.\nupdates the accumulator’s state from a vector of states.\nGet the Accumulator’s output data type.\nStore the input data types that are provided by DataFusion …\nReturns the state of the accumulator at the end of the …\nGet the Accumulator’s state data types.\nupdates the accumulator’s state from a vector of arrays.\nBuilds an <code>Expr</code> that filters timestamp column from given …\nBuilds a filter for a timestamp column with the same type …\nConverts a Timestamp to datafusion literal value.\nLogical representation of a user-defined aggregate …\nactual implementation\nthe creator that creates aggregate functions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nname\nCreate a new AggregateUDF\nReturn type\nsignature\nthe accumulator’s state’s description as a function of …\nCreate Accumulator with the data type of input columns.\nAccumulator creator that will be used by DataFusion\nfixed number of arguments of arbitrary types\nbinary\nbinary but from view types.\ntrue or false value\nDate stored as a signed 32bit int days since UNIX epoch …\nDate stored as a signed 64bit int milliseconds since UNIX …\n128bit decimal, using the i128 to represent the decimal, …\n256bit decimal, using the i256 to represent the decimal, …\nDictionary type: index type and value\nDuration in microseconds\nDuration in milliseconds\nDuration in nanoseconds\nDuration in seconds\nexact number of arguments of an exact type\nfixed size binary\nFixed size list scalar.\n16bit float\n32bit float\n64bit float\nDefault counter column name for OTLP metrics.\nDefault physical table name\nDefault timestamp column name for Prometheus metrics.\nDefault value column name for Prometheus metrics.\nAn immutable function will always return the same output …\nsigned 16bit int\nsigned 32bit int\nsigned 64bit int\nsigned 8bit int\nNumber of elapsed days and milliseconds (no leap seconds) …\nA triple of the number of elapsed months, days, and …\nNumber of elapsed whole months\nlarge binary\nThe array must be a LargeListArray with length 1.\nutf-8 encoded string representing a LargeString’s arrow …\nRepresents a single element of a <code>ListArray</code> as an <code>ArrayRef</code>\nRepresents a single element <code>MapArray</code> as an <code>ArrayRef</code>.\nrepresents <code>DataType::Null</code> (castable to/from any other type)\nZero argument This is the new signature for functions with …\nOne of a list of signatures\nA function’s return type\nA dynamically typed, nullable single value.\nThe Signature of a function defines its supported input …\nA stable function may return different values given the …\nThis signature corresponds to which types an aggregator …\nRepresents a single element <code>StructArray</code> as an <code>ArrayRef</code>. See\nTime stored as a signed 32bit int as milliseconds since …\nTime stored as a signed 32bit int as seconds since midnight\nTime stored as a signed 64bit int as microseconds since …\nTime stored as a signed 64bit int as nanoseconds since …\nTimestamp Microseconds\nTimestamp Milliseconds\nTimestamp Nanoseconds\nTimestamp Second\nA function’s type signature, which defines the function…\nunsigned 16bit int\nunsigned 32bit int\nunsigned 64bit int\nunsigned 8bit int\nfixed number of arguments of an arbitrary but equal type …\nA nested datatype that can represent slots of differing …\nutf-8 encoded string.\nutf-8 encoded string but from view types.\narbitrary number of arguments of an common type out of a …\nOne or more arguments with arbitrary types\nA volatile function may change the return value from …\nA function’s volatility, which defines the functions …\nWrapping addition of <code>ScalarValue</code>\nChecked addition of <code>ScalarValue</code>\nany - Creates a signature which can a be made of any type …\nCalculate arithmetic negation for a scalar value\nTry to cast this value to a ScalarValue of type <code>data_type</code>\nTry to cast this value to a ScalarValue of type <code>data_type</code> …\nRetrieve ScalarValue for each row in <code>array</code>\nreturn the <code>DataType</code> of this <code>ScalarValue</code>\nAbsolute distance between two numeric values (of the same …\nPerforms <code>lhs / rhs</code>\nCompares a single row of array @ index for equality with …\nexact - Creates a signature which must match the types in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether this value is null or not.\nConverts an iterator of references <code>ScalarValue</code> into an …\nWrapping multiplication of <code>ScalarValue</code>\nChecked multiplication of <code>ScalarValue</code>\nnew - Creates a new Signature from any type signature and …\nReturns a <code>ScalarValue</code> representing PI/2\nReturns a <code>ScalarValue</code> representing FRAC_PI_2’s upper …\nReturns a <code>ScalarValue</code> representing infinity\nReturns a <code>ScalarValue::IntervalDayTime</code> representing <code>days</code> …\nReturns a <code>ScalarValue::IntervalMonthDayNano</code> representing …\nReturns a <code>ScalarValue::IntervalYearMonth</code> representing <code>years</code>…\nConverts <code>Vec&lt;ScalarValue&gt;</code> where each element has type …\nConverts <code>Vec&lt;ScalarValue&gt;</code> where each element has type …\nConverts <code>IntoIterator&lt;Item = ScalarValue&gt;</code> where each …\nSame as <code>ScalarValue::new_list</code> but with nullable set to …\nReturns a <code>ScalarValue</code> representing -PI/2\nReturns a <code>ScalarValue</code> representing negative infinity\nCreate a negative one value in the given type.\nReturns a <code>ScalarValue</code> representing -PI\nReturns a <code>ScalarValue</code> representing -PI’s lower bound\nCreate ListArray with Null with specific data type\nCreate an one value in the given type.\nReturns a <code>ScalarValue</code> representing PI\nReturns a <code>ScalarValue</code> representing PI’s upper bound\nCreate a <code>Result&lt;ScalarValue&gt;</code> with the provided value and …\nReturns a <code>ScalarValue</code> representing <code>value</code> and <code>tz_opt</code> …\nReturns a <code>ScalarValue::Utf8</code> representing <code>val</code>\nReturns a <code>ScalarValue::Utf8View</code> representing <code>val</code>\nCreate a zero value in the given type.\none_of Creates a signature which can match any of the …\nGet raw data (inner array) inside ScalarValue\nPerforms <code>lhs % rhs</code>\nEstimate size if bytes including <code>Self</code>. For values with …\nEstimates size of <code>HashSet</code> in bytes.\nEstimates size of <code>Vec</code> in bytes.\nEstimates size of <code>VecDeque</code> in bytes.\nWrapping subtraction of <code>ScalarValue</code>\nChecked subtraction of <code>ScalarValue</code>\nConverts a scalar value into an 1-row array.\nConverts a scalar value into an array of <code>size</code> rows.\nConverts a scalar into an arrow <code>Scalar</code> (which implements …\nReturns the Some(<code>&amp;str</code>) representation of <code>ScalarValue</code> of …\nCreate a Null instance of ScalarValue for this datatype\nCreate a Null instance of ScalarValue for this datatype\nConverts a value in <code>array</code> at <code>index</code> into a ScalarValue\nTry to parse <code>value</code> into a ScalarValue of type <code>target_type</code>\nCreate a decimal Scalar from value/precision and scale.\ntype_signature - The types that the function accepts. See …\nuniform - Creates a function with a fixed number of …\nvariadic - Creates a variadic signature that represents an …\nvariadic_any - Creates a variadic signature that …\nvolatility - The volatility of the function. See Volatility…\nThe query request to be handled by the RegionServer …\nReturns the argument unchanged.\nThe header of this request. Often to store some context of …\nCalls <code>U::from(self)</code>.\nThe form of the query: a logical plan.\nThe id of the region to be queried.\nfixed number of arguments of arbitrary types\nexact number of arguments of an exact type\nAn immutable function will always return the same output …\nZero argument This is the new signature for functions with …\nOne of a list of signatures\nThe Signature of a function defines its supported input …\nA stable function may return different values given the …\nA function’s type signature, which defines the function…\nfixed number of arguments of an arbitrary but equal type …\narbitrary number of arguments of an common type out of a …\nOne or more arguments with arbitrary types\nA volatile function may change the return value from …\nA function’s volatility, which defines the functions …\ntype_signature - The types that the function accepts. See …\nvolatility - The volatility of the function. See Volatility…\nAdapts greptime’s SendableRecordBatchStream to DataFusion…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")