searchState.loadedDescShard("common_time", 0, "ISO 8601 Date values. The inner representation is a signed …\nAdds given IntervalDayTime to the current date.\nAdds given IntervalMonthDayNano to the current date.\nAdds given IntervalYearMonth to the current date.\nFormat Date for given format and timezone. If <code>tz==None</code>, …\nDate is formatted according to ISO-8601 standard.\nReturns the argument unchanged.\nTry parsing a string into <code>Date</code> with given timezone.\nTry parsing a string into <code>Date</code> with UTC timezone.\nCalls <code>U::from(self)</code>.\nSubtracts given IntervalDayTime to the current date.\nSubtracts given IntervalMonthDayNano to the current date.\nSubtracts given IntervalYearMonth to the current date.\nDuration represents the elapsed time in either seconds, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Duration with value and TimeUnit.\nCreate a new Duration in microsecond.\nCreate a new Duration in millisecond.\nCreate a new Duration in nanosecond.\nCreate a new Duration in second.\nSplit a Duration into seconds part and nanoseconds part. …\nConvert to std::time::Duration.\nReturn the TimeUnit of current Duration.\nReturn the value of current Duration.\nSNAFU context selector for the <code>Error::ArithmeticOverflow</code> …\nContains the error value\nSNAFU context selector for the <code>Error::Format</code> variant\nSNAFU context selector for the <code>Error::InvalidDatabaseTtl</code> …\nSNAFU context selector for the <code>Error::InvalidDateStr</code> …\nSNAFU context selector for the <code>Error::InvalidTimezoneOffset</code>…\nContains the success value\nSNAFU context selector for the <code>Error::ParseDateStr</code> variant\nSNAFU context selector for the <code>Error::ParseDuration</code> variant\nSNAFU context selector for the <code>Error::ParseOffsetStr</code> …\nSNAFU context selector for the <code>Error::ParseTimestamp</code> …\nSNAFU context selector for the <code>Error::ParseTimezoneName</code> …\nSNAFU context selector for the <code>Error::TimestampOverflow</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates the number of elapsed days and milliseconds, …\n…\nThe maximum value that can be represented\nThe maximum value that can be represented\nThe minimum value that can be represented\nThe minimum value that can be represented\nThe multiplicative inverse, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\nA triple of the number of elapsed months, days, and …\nIndicates the number of elapsed whole months, stored as …\nThe additive identity i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nNumber of days\nNumber of days\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget postgres time part(include hours, minutes, seconds, …\nget time part string\nget year month string\nDetermine if day exists\nDetermine time part(includes hours, minutes, seconds, …\nDetermine if year or month exist\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll the field in the interval is 0\nNumber of milliseconds\nNumber of months\nNumber of months\nNumber of nanoseconds\npadding i64 to string with 2 digits\nConvert IntervalFormat to iso8601 format string ISO …\nConvert IntervalFormat to postgres format string postgres …\nConvert IntervalFormat to sql standard format string SQL …\nA half-open time range.\nTime range in milliseconds.\nComputes the AND’ed range with other.\nReturns true if <code>timestamp</code> is contained in the range.\nCreate an empty range.\nReturns the upper bound of the range (exclusive).\nReturns the argument unchanged.\nCreate GenericRange from optional start and end. If the …\nCreate a range <code>[start, INF)</code>.\nCreate a range <code>[start, INF)</code>.\nChecks if current range intersect with target.\nCalls <code>U::from(self)</code>.\nReturns true if the range contains no timestamps.\nReturn a range containing all possible values.\nCreates a new range that contains values in <code>[start, end)</code>.\nCreate a TimestampRange with optional inclusive end …\nCreate a TimestampRange with optional inclusive end …\nCompute the OR’ed range of two ranges. Notice: this …\nCreate a range that containing only given <code>ts</code>.\nCreate a range that containing only given <code>ts</code>.\nReturns the lower bound of the range (inclusive).\nCreate a range <code>[-INF, end)</code>.\nCreate a range <code>[-INF, end)</code>.\nShortcut method to create a timestamp range with given …\nShortcut method to create a timestamp range with given …\nTime value, represents the elapsed time since midnight in …\nConvert a time to given time unit. Return <code>None</code> if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates the time by value and <code>TimeUnit</code>.\nCreates the time in microsecond.\nCreates the time in millisecond.\nCreates the time in nanosecond.\nCreates the time in second.\nSplit a Time into seconds part and nanoseconds part. …\nCast the Time into chrono NaiveDateTime\nFormat Time to ISO8601 string. If the time exceeds what …\nFormat Time for given timezone. When timezone is None, …\nReturns the <code>TimeUnit</code> of the time.\nReturns the value of the time.\nTimestamp represents the value of …\nAdds given IntervalDayTime to the current timestamp.\nAdds a duration to timestamp.\nAdds given IntervalMonthDayNano to the current timestamp.\nAdds given IntervalYearMonth to the current timestamp.\nFormat timestamp for given format and timezone. If <code>tz==None</code>…\nConvert a timestamp to given time unit. Conversion from a …\nConvert a timestamp to given time unit. Conversion from a …\nCreates current timestamp in millisecond.\nCreates current timestamp in specific time <code>unit</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Timestamp instance from seconds and …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the naive datetime (which has no specific …\nSplit a Timestamp into seconds part and nanoseconds part. …\nSubtracts current timestamp with another timestamp, …\nSubtracts given IntervalDayTime to the current timestamp.\nSubtracts a duration from timestamp.\nSubtracts given IntervalMonthDayNano to the current …\nSubtracts given IntervalYearMonth to the current timestamp.\nConvert timestamp to chrono date.\nConvert timestamp to chrono time.\nFormat timestamp to ISO8601 string. If the timestamp …\nFormat timestamp use <strong>system timezone</strong>.\nFormat timestamp for given timezone. If <code>tz==None</code>, the …\nPositive infinity.\nMaximum value of a timestamp.\nMinimum value of a timestamp.\nUnix timestamp in millisecond resolution.\nAligns the value by <code>bucket_duration</code> or <code>None</code> if underflow …\nAligns the value by <code>bucket_duration</code> to ceil or <code>None</code> if …\nReturns the timestamp value as i64.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new timestamp from unix timestamp in milliseconds.\nSystem timezone in <code>frontend</code>/<code>standalone</code>, config by option …\nReturns the argument unchanged.\nParse timezone offset string and return None if given …\nIf the <code>tz=Some(timezone)</code>, return <code>timezone</code> directly, or …\nCompute timezone from given offset hours and minutes …\nCalls <code>U::from(self)</code>.\nReturns the number of seconds to add to convert from UTC …\nIf the <code>tz = Some(&quot;&quot;) || None || Some(Invalid timezone)</code>, …\nReturn current system config timezone, default config is …\nTime To Live for database, which can be <code>Forever</code>, or a …\nDuration to keep the data, this duration should be non-zero\nDuration to keep the data, this duration should be non-zero\nKeep the data forever\nKeep the data forever\nInstantly discard upon insert\nTime To Live\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a string that is either <code>forever</code>, or a duration to …\nParse a string that is either <code>instant</code>, <code>forever</code>, or a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the TimeToLive is expired with the given …\nIs the default value, which is <code>Forever</code>\nis instant variant\nReturns the time duration since UNIX_EPOCH in milliseconds.\nReturns the current time in rfc3339 format.\nCast a <code>NaiveDateTime</code> with the given timezone.\nPort of rust unstable features <code>int_roundings</code>.\nReturns the yesterday time in rfc3339 format.")