searchState.loadedDescShard("puffin", 0, "Format specification for Puffin files\nBlob metadata of Puffin\nBuilder for <code>BlobMetadata</code>.\nError type for BlobMetadataBuilder\nCompression codec used to compress the blob\nSingle LZ4 compression frame, with content size present\nUninitialized field\nCustom validation error\nSingle Zstandard compression frame, with content size …\nBlob type\nBlob type\nBlob type\nBuilds a new <code>BlobMetadata</code>.\nSee <code>CompressionCodec</code>. If omitted, the data is assumed to …\nSee <code>CompressionCodec</code>. If omitted, the data is assumed to …\nSee <code>CompressionCodec</code>. If omitted, the data is assumed to …\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor Iceberg, it’ list of field IDs the blob was computed …\nFor Iceberg, it’ list of field IDs the blob was computed …\nFor Iceberg, it’ list of field IDs the blob was computed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the blob stored in the file (after …\nThe length of the blob stored in the file (after …\nThe length of the blob stored in the file (after …\nCalculates the memory usage of the blob metadata in bytes.\nThe offset in the file where the blob contents start\nThe offset in the file where the blob contents start\nThe offset in the file where the blob contents start\nStorage for arbitrary meta-information about the blob\nStorage for arbitrary meta-information about the blob\nStorage for arbitrary meta-information about the blob\nFor Iceberg, it’s sequence number of the Iceberg …\nFor Iceberg, it’s sequence number of the Iceberg …\nFor Iceberg, it’s sequence number of the Iceberg …\nFor Iceberg, it’s ID of the Iceberg table’s snapshot …\nFor Iceberg, it’s ID of the Iceberg table’s snapshot …\nFor Iceberg, it’s ID of the Iceberg table’s snapshot …\nSNAFU context selector for the <code>Error::BlobIndexOutOfBound</code> …\nSNAFU context selector for the <code>Error::BlobNotFound</code> variant\nSNAFU context selector for the <code>Error::CacheGet</code> variant\nSNAFU context selector for the <code>Error::Close</code> variant\nSNAFU context selector for the <code>Error::Create</code> variant\nSNAFU context selector for the <code>Error::DeserializeJson</code> …\nSNAFU context selector for the <code>Error::DuplicateBlob</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::External</code> variant\nSNAFU context selector for the <code>Error::FileKeyNotMatch</code> …\nSNAFU context selector for the <code>Error::Flush</code> variant\nSNAFU context selector for the <code>Error::InvalidPuffinFooter</code> …\nSNAFU context selector for the <code>Error::Lz4Compression</code> …\nSNAFU context selector for the <code>Error::Lz4Decompression</code> …\nSNAFU context selector for the <code>Error::MagicNotMatched</code> …\nSNAFU context selector for the <code>Error::Metadata</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::Open</code> variant\nSNAFU context selector for the <code>Error::Read</code> variant\nSNAFU context selector for the <code>Error::Remove</code> variant\nSNAFU context selector for the <code>Error::Rename</code> variant\nSNAFU context selector for the <code>Error::SerializeJson</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::WalkDir</code> variant\nSNAFU context selector for the <code>Error::Write</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>AsyncReader</code> defines an asynchronous reader for puffin data.\nReader for the footer of a Puffin data file\nPuffin file reader, implemented [<code>PuffinSyncReader</code>] and […\nReads particular blob data based on given metadata.\nThe content length of the puffin file\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetches the FileMetadata.\nThe metadata of the puffin file, which is parsed from the …\nThe prefetch footer size\nThe source of the puffin file\nThe source of the puffin file\nPuffin file reader, implemented [<code>PuffinSyncReader</code>] and […\nConverts the reader into an owned blob reader.\nThe metadata of the puffin file, which is parsed from the …\nThe source of the puffin file\nThe default prefetch size for the footer reader.\nReader for the footer of a Puffin data file\nThe content length of the puffin file\nThe prefetch footer size\nThe source of the puffin file\n<code>AsyncWriter</code> defines an asynchronous writer for puffin data.\nBlob ready to be written\nPuffin file writer, implements both [<code>PuffinSyncWriter</code>] and …\n<code>SyncWriter</code> defines a synchronous writer for puffin data.\nAdd a blob to the Puffin file\nAdd a blob to the Puffin file\nThe metadata of the blobs.\nThe type of the blob\nThe data of the blob\nThe codec used to compress the blob.\nFinish writing the Puffin file, returns the number of …\nFinish writing the Puffin file, returns the number of …\nWhether the footer payload should be LZ4 compressed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe properties of the file.\nThe properties of the blob\nSets whether the footer payload should be LZ4 compressed.\nSets whether the footer payload should be LZ4 compressed.\nSet the properties of the Puffin file\nSet the properties of the Puffin file\nThe writer to write to.\nThe number of bytes written.\nPuffin file writer, implements both [<code>PuffinSyncWriter</code>] and …\nThe metadata of the blobs.\nWhether the footer payload should be LZ4 compressed.\nThe properties of the file.\nThe writer to write to.\nThe number of bytes written.\nWriter for the footer of a Puffin file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerializes the footer to bytes\nAppends reserved flags (currently zero-initialized) to the …\nMetadata of a Puffin file\nBuilder for <code>FileMetadata</code>.\nError type for FileMetadataBuilder\nUninitialized field\nCustom validation error\nMetadata for each blob in the file\nMetadata for each blob in the file\nMetadata for each blob in the file\nBuilds a new <code>FileMetadata</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the memory usage of the file metadata in bytes.\nStorage for arbitrary meta-information, like writer …\nStorage for arbitrary meta-information, like writer …\nStorage for arbitrary meta-information, like writer …\n<code>PartialReader</code> to perform synchronous or asynchronous reads …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the portion is empty.\nCreates a new <code>PartialReader</code> for the given resource.\noffset of the portion in the resource\nReturns the size of the portion in portion.\nsize of the portion in the resource\nResource for the portion. The <code>offset</code> and <code>size</code> fields are …\n<code>BlobGuard</code> is provided by the <code>PuffinReader</code> to access the …\n<code>DirGuard</code> is provided by the <code>PuffinReader</code> to access the …\n<code>GuardWithMetadata</code> provides access to the blob or directory …\nThe <code>PuffinManager</code> trait provides a unified interface for …\nThe <code>PuffinReader</code> trait provides methods for reading blobs …\nThe <code>PuffinWriter</code> trait provides methods for writing blobs …\nOptions available for <code>put_blob</code> and <code>put_dir</code> methods.\nReads a blob from the Puffin file.\nThe compression codec to use for blob data.\nReads a directory from the Puffin file.\nFinalizes the Puffin file after writing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata of the Puffin file.\nReturns the metadata of the directory.\nCreates a new <code>GuardWithMetadata</code> instance.\nReturns the path of the directory.\nWrites a blob associated with the specified <code>key</code> to the …\nWrites a directory associated with the specified <code>key</code> to …\nCreates a <code>PuffinReader</code> for the specified <code>handle</code>.\nReturns the reader for the blob data.\nSets whether the footer should be LZ4 compressed.\nCreates a <code>PuffinWriter</code> for the specified <code>handle</code>.\nMetrics for index metadata.\nA cache for storing the metadata of the index files.\nReturns the argument unchanged.\nGets the metadata from the cache.\nCalls <code>U::from(self)</code>.\nPuts the metadata into the cache.\n<code>PuffinFileAccessor</code> is for opening readers and writers for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpens a reader for the given puffin file handle.\nCreates a writer for the given puffin file handle.\n<code>FsPuffinManager</code> is a <code>PuffinManager</code> that provides readers …\n<code>FsPuffinReader</code> is a <code>PuffinReader</code> that provides fs readers …\n<code>FsPuffinWriter</code> is a <code>PuffinWriter</code> that writes blobs and …\nWritten blob keys.\nThe file size hint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle of the puffin file.\nThe name of the puffin file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FsPuffinManager</code> with the specified <code>stager</code> …\nThe puffin file accessor.\nThe puffin file accessor.\nThe puffin file metadata cache.\nThe underlying <code>PuffinFileWriter</code>.\nThe puffin metadata cache.\nThe stager.\nThe stager.\nThe stager.\nSets the puffin metadata cache.\nMetadata for file in directory in puffin file.\nMetadata for directory in puffin file.\nThe file is stored as a blob in the puffin file. <code>blob_index</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key of the blob in the puffin file.\nThe relative path of the file in the directory.\n<code>Either</code> is a type that represents either <code>A</code> or <code>B</code>.\n<code>FsPuffinReader</code> is a <code>PuffinReader</code> that provides fs readers …\n<code>RandomReadBlob</code> is a <code>BlobGuard</code> that directly reads the blob …\nThe file size hint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle of the puffin file.\nHandles the decompression of the reader and writes the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe puffin file accessor.\nThe puffin file metadata cache.\nThe stager.\n<code>FsPuffinWriter</code> is a <code>PuffinWriter</code> that writes blobs and …\nWritten blob keys.\nThe name of the puffin file.\nCompresses the raw data and writes it to the puffin file.\nThe underlying <code>PuffinFileWriter</code>.\nThe stager.\n<code>BoundedStager</code> is a <code>Stager</code> that uses <code>moka</code> to manage staging …\n<code>DirWriterProvider</code> provides a way to write files into a …\n<code>FsBlobGuard</code> is a <code>BlobGuard</code> for accessing the blob and …\n<code>FsDirGuard</code> is a <code>DirGuard</code> for accessing the directory and …\nFunction that initializes a blob.\nFunction that initializes a directory.\n<code>Stager</code> manages the staging area for the puffin files.\n<code>StagerNotifier</code> provides a way to notify the caller of the …\nResult containing the number of bytes written (u64).\nThe base directory of the staging area.\nThe cache maintaining the cache key to the size of the …\nThe delete queue for the cleanup task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a blob, initializing it if necessary using the …\nRetrieves a directory, initializing it if necessary using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotifier for the stager.\nNotifies the caller that a blob or directory was evicted …\nNotifies the caller that a cache hit occurred. <code>size</code> is the …\nNotifies the caller that a blob or directory was inserted …\nNotifies the caller that a cache miss occurred. <code>size</code> is …\nNotifies the caller that a blob was inserted into the …\nNotifies the caller that a directory was inserted into the …\nNotifies the caller that the recycle bin was cleared. <code>size</code> …\nNotifies the caller that a blob or directory was dropped …\nPurges all content for the given puffin file from the …\nStores a directory in the staging area.\nThe recycle bin for the deleted files and directories.\nCreates a writer for the given relative path.\n<code>BoundedStager</code> is a <code>Stager</code> that uses <code>moka</code> to manage staging …\n<code>FsBlobGuard</code> is a <code>BlobGuard</code> for accessing the blob and …\n<code>FsDirGuard</code> is a <code>DirGuard</code> for accessing the directory and …\n<code>MokaDirWriterProvider</code> implements <code>DirWriterProvider</code> for …\nThe base directory of the staging area.\nThe cache maintaining the cache key to the size of the …\nThe delete queue for the cleanup task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWalks through the directory and calculate the total size …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotifier for the stager.\nRecovers the staging area by iterating through the staging …\nThe recycle bin for the deleted files and directories.")