searchState.loadedDescShard("auth", 0, "Authentication information sent by the client.\npub type alias\nCombination of authenticate() and authorize(). In most …\nChecks whether a user is valid and allowed to access the …\nChecks whether a connection request from a certain user to …\nReturns whether this user provider implementation is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconstruct a <code>UserInfo</code> impl with name use default username …\nAuthentication information sent by the client.\nconstruct a <code>UserInfo</code> impl with name use default username …\nSNAFU context selector for the <code>Error::AccessDenied</code> variant\nSNAFU context selector for the <code>Error::AuthBackend</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FileWatch</code> variant\nSNAFU context selector for the <code>Error::FromUtf8</code> variant\nSNAFU context selector for the <code>Error::IllegalParam</code> variant\nSNAFU context selector for the <code>Error::InternalState</code> variant\nSNAFU context selector for the <code>Error::InvalidConfig</code> variant\nSNAFU context selector for the <code>Error::Io</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::PermissionDenied</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::UserNotFound</code> variant\nSNAFU context selector for the <code>Error::UserPasswordMismatch</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCombination of authenticate() and authorize(). In most …\nChecks whether a user is valid and allowed to access the …\nChecks whether a connection request from a certain user to …\nReturns whether this user provider implementation is …\nReturn a random username/password pair This is useful for …\nA user provider that reads user credential from a file and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")