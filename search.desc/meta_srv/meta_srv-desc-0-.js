searchState.loadedDescShard("meta_srv", 0, "gRPC bind addr\nCreates a pool for the Postgres backend.\nCreates a pool for the Postgres backend.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ngRPC serving state receiver. Only present if the gRPC …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilder for <code>MetaPeerClient</code>.\nError type for MetaPeerClientBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>MetaPeerClient</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nMessages sent when the leader changes.\nLeaderKey is a key that represents the leader of metasrv. …\nGets all candidates in the election.\nCampaign waits to acquire leadership in an election.\nReturns the argument unchanged.\nWhen a new leader is born, it may need some initialization …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if current node is the leader.\nThe key in byte. key is an opaque key representing the …\nReturns the leader value for the current election.\nThe lease ID of the election leader.\nThe name in byte. name is the election identifier that …\nRegisters a candidate for the election.\nResets the campaign.\nReleases election leadership so other campaigners may …\nThe creation revision of the key.\nSends a leader change message to the channel and sets the …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLease information for rds election.\nLeaderKey used for [LeaderChangeMessage] in rds election …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses the value and expire time from the given string …\nMySQL implementation of Election.\nUse <code>SELECT FOR UPDATE</code> to lock for compatibility with other …\nCheck if the MySQL version is supported.\nReturns <code>true</code> if the deletion is successful. Caution: …\nAttempts to acquire leadership by executing a campaign. …\nElected as leader. The leader should put the key and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns value, expire time and current time.\nReturns all values and expire time with the given key …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms a lease check during the election process.\nReturns <code>true</code> if the insertion is successful\nRenew the lease\nStill consider itself as the leader locally but failed to …\nPgClient for election.\nPostgreSql implementation of Election.\nAttempts to acquire leadership by executing a campaign. …\nReturns <code>true</code> if the deletion is successful. Caution: …\nElected as leader. The leader should put the key and …\nReturns the result of the query.\nThe client-side timeout for statement execution.\nHandles the actions of a follower in the election process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns value, expire time and current time. If <code>with_origin</code>…\nReturns all values and expire time with the given key …\nThe idle session timeout.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandles the actions of a leader in the election process.\nReturns <code>true</code> if the insertion is successful\nReturns the result of the query.\nThe statement timeout.\nStep down the leader. The leader should delete the key and …\nStill consider itself as the leader locally but failed to …\nSNAFU context selector for the <code>Error::BatchGet</code> variant\nSNAFU context selector for the <code>Error::BuildKafkaClient</code> …\nSNAFU context selector for the <code>Error::BuildPartitionClient</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ChooseItems</code> variant\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the <code>Error::ConnectMySql</code> variant\nSNAFU context selector for the <code>Error::ConvertProtoData</code> …\nSNAFU context selector for the <code>Error::CreateChannel</code> variant\nSNAFU context selector for the <code>Error::CreateMySqlPool</code> …\nSNAFU context selector for the <code>Error::CreatePostgresPool</code> …\nSNAFU context selector for the <code>Error::DatanodeTableNotFound</code>…\nSNAFU context selector for the <code>Error::DeleteRecords</code> variant\nSNAFU context selector for the <code>Error::DeserializeFromJson</code> …\nSNAFU context selector for the <code>Error::DowngradeLeader</code> …\nSNAFU context selector for the <code>Error::EmptyKey</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::EtcdFailed</code> variant\nSNAFU context selector for the <code>Error::ExceededDeadline</code> …\nSNAFU context selector for the <code>Error::ExceededRetryLimit</code> …\nSNAFU context selector for the <code>Error::FlowStateHandler</code> …\nSNAFU context selector for the <code>Error::GetPostgresClient</code> …\nSNAFU context selector for the <code>Error::GetPostgresConnection</code>…\nSNAFU context selector for the <code>Error::HandlerNotFound</code> …\nSNAFU context selector for the <code>Error::InitDdlManager</code> …\nSNAFU context selector for the <code>Error::InitExportMetricsTask</code>…\nSNAFU context selector for the <code>Error::InitMetadata</code> variant\nSNAFU context selector for the <code>Error::InvalidArguments</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidHttpBody</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidLeaseKey</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidStatKey</code> …\nSNAFU context selector for the <code>Error::InvalidUtf8Value</code> …\nSNAFU context selector for the <code>Error::InvalidateTableCache</code> …\nSNAFU context selector for the <code>Error::IsNotLeader</code> variant\nSNAFU context selector for the <code>Error::Join</code> variant\nSNAFU context selector for the <code>Error::KvBackend</code> variant\nSNAFU context selector for the <code>Error::LeaderPeerChanged</code> …\nSNAFU context selector for the <code>Error::LeaseKeyFromUtf8</code> …\nSNAFU context selector for the <code>Error::LeaseValueFromUtf8</code> …\nSNAFU context selector for the <code>Error::ListCatalogs</code> variant\nSNAFU context selector for the <code>Error::ListSchemas</code> variant\nSNAFU context selector for the <code>Error::ListTables</code> variant\nSNAFU context selector for the <code>Error::LookupPeer</code> variant\nSNAFU context selector for the <code>Error::MailboxChannelClosed</code> …\nSNAFU context selector for the <code>Error::MailboxClosed</code> variant\nSNAFU context selector for the <code>Error::MailboxReceiver</code> …\nSNAFU context selector for the <code>Error::MailboxTimeout</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::MigrationAbort</code> …\nSNAFU context selector for the <code>Error::MigrationRunning</code> …\nSNAFU context selector for the <code>Error::MissingRequestHeader</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::MySqlExecution</code> …\nSNAFU context selector for the <code>Error::NextSequence</code> variant\nSNAFU context selector for the <code>Error::NoEnoughAvailableNode</code>…\nSNAFU context selector for the <code>Error::NoLeader</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::Other</code> variant\nSNAFU context selector for the <code>Error::ParseAddr</code> variant\nSNAFU context selector for the <code>Error::ParseBool</code> variant\nSNAFU context selector for the <code>Error::ParseMySqlUrl</code> variant\nSNAFU context selector for the <code>Error::ParseNum</code> variant\nSNAFU context selector for the <code>Error::PeerUnavailable</code> …\nSNAFU context selector for the <code>Error::PostgresExecution</code> …\nSNAFU context selector for the <code>Error::ProcedureNotFound</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::PublishMessage</code> …\nSNAFU context selector for the <code>Error::PushMessage</code> variant\nSNAFU context selector for the <code>Error::PusherNotFound</code> …\nSNAFU context selector for the <code>Error::QueryProcedure</code> …\nSNAFU context selector for the <code>Error::Range</code> variant\nSNAFU context selector for the <code>Error::RegionMigrated</code> …\nSNAFU context selector for the <code>Error::RegionOpeningRace</code> …\nSNAFU context selector for the <code>Error::RegionRouteNotFound</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::RetryLater</code> variant\nSNAFU context selector for the <code>Error::RetryLaterWithSource</code> …\nSNAFU context selector for the <code>Error::SaveClusterInfo</code> …\nSNAFU context selector for the <code>Error::SchemaAlreadyExists</code> …\nSNAFU context selector for the <code>Error::SendShutdownSignal</code> …\nSNAFU context selector for the <code>Error::SerializeToJson</code> …\nSNAFU context selector for the <code>Error::ShutdownServer</code> …\nSNAFU context selector for the <code>Error::SqlExecutionTimeout</code> …\nSNAFU context selector for the <code>Error::StartGrpc</code> variant\nSNAFU context selector for the <code>Error::StartHttp</code> variant\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the <code>Error::StartTelemetryTask</code> …\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nSNAFU context selector for the <code>Error::SubmitDdlTask</code> variant\nSNAFU context selector for the <code>Error::SubmitProcedure</code> …\nSNAFU context selector for the <code>Error::TableAlreadyExists</code> …\nSNAFU context selector for the <code>Error::TableInfoNotFound</code> …\nSNAFU context selector for the <code>Error::TableMetadataManager</code> …\nSNAFU context selector for the <code>Error::TableNotFound</code> variant\nSNAFU context selector for the <code>Error::TableRouteNotFound</code> …\nSNAFU context selector for the <code>Error::TcpBind</code> variant\nSNAFU context selector for the <code>Error::TcpIncoming</code> variant\nSNAFU context selector for the <code>Error::TomlFormat</code> variant\nSNAFU context selector for the <code>Error::TooManyPartitions</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Unexpected</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Unsupported</code> variant\nSNAFU context selector for the <code>Error::UpdateTopicNameValue</code> …\nSNAFU context selector for the <code>Error::WaitProcedure</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error is retryable.\n<code>ToString::to_string</code>, but without panic on OOM.\nHolds the heartbeat statistics. It is capped by the number …\nThis is our port of Akka’s “PhiAccrualFailureDetector…\nDuration corresponding to number of potentially …\nBootstrap the stats with heartbeats that corresponds to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of samples to use for calculation of mean and …\nMinimum standard deviation to use for the normal …\nCalculation of phi, derived from the Cumulative …\nThe suspicion level of the accrual failure detector.\nA low threshold is prone to generate many wrong suspicions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe receiver of the deregister signal.\nHandleControl\nThe group of heartbeat handlers.\nThe builder to build the group of heartbeat handlers.\nThe customizer of the <code>HeartbeatHandlerGroupBuilder</code>.\nThe pusher of the heartbeat response.\nThe group of heartbeat pushers.\nAdds the default handlers.\nAdds the handler after the specified handler.\nAdds the handler before the specified handler.\nBuilds the group of heartbeat handlers.\nDeregisters the heartbeat response <code>Pusher</code> with the given …\nA simple handler for flow internal state report\nThe factor that determines how often statistics should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the heartbeat request.\nThe group of heartbeat handlers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe plugins.\nReturns the <code>Pushers</code> of the group.\nThe heartbeat response pushers.\nThe handler to handle region failure.\nThe handler to handle region lease.\nRegisters the heartbeat response <code>Pusher</code> with the given key …\nReplaces the handler with the specified name.\n<code>ToString::to_string</code>, but without panic on OOM.\nSets the flush stats factor.\nSets the <code>Plugins</code>.\nSets the <code>RegionFailureHandler</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe handler to collect cluster info from the heartbeat …\nThe handler to collect cluster info from the heartbeat …\nThe handler to collect cluster info from the heartbeat …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKeeps [Datanode] leases\nKeeps [Flownode] leases\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nflow_node_id -&gt; epoch\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFind all alive datanodes\nFind all alive flownodes\nReturns the lease value of the given datanode id, if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the datanode can accept ingest workload …\nlook up <code>Peer</code> given [<code>ClusterId</code>] and <code>DatanodeId</code>, will only …\nlook up <code>Peer</code> given [<code>ClusterId</code>] and <code>DatanodeId</code>, only return …\nSet the condition for the lease filter.\nThe value of the leader. It is used to store the leader’…\nWhether to allow region failover on local WAL.\nThe datastore for kv metadata.\nThe address the server listens on.\nThe data home directory.\nThe datanode options.\nWhether to enable region failover.\nWhether to enable telemetry.\nThe metrics export options.\nThe failure detector options.\nThe factor that determines how often statistics should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe HTTP server options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logging options.\nLooks up a datanode peer by peer_id, returning it only …\nThe max operations per txn\nLock id for meta kv election. Only effect when using …\nTable name of rds kv backend.\nThe procedure options.\nThe type of selector.\nThe address the server advertises to the clients.\nThe address of the store, e.g., etcd.\nThe store key prefix. If it is not empty, all keys in the …\nThe tracing options.\n<code>ToString::to_string</code>, but without panic on OOM.\nWhether to use the memory store.\nThe WAL options.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nElapsed time to execution of heartbeat handlers.\nThe heartbeat connection gauge.\nHeartbeat received by metasrv.\nInactive region gauge.\nMeta kv cache hit counter.\nMeta kv cache miss counter.\nElapsed time to responding kv requests.\nElapsed time to leader cache kv.\nThe migration datanode counter.\nThe migration error counter.\nThe migration execute histogram.\nThe migration fail counter.\nThe migration stage elapsed histogram.\nThe remote WAL prune execute counter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNodeExcluder is used to help decide whether some nodes …\nReturns the excluded datanode ids.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe context of procedure execution.\nUsed to generate new Context.\nThe default timeout for region migration.\nDefault implementation.\nMetrics of region migration.\nIt’s shared in each step and available even after …\nPersistent data of RegionMigrationProcedure.\nPersistent data of RegionMigrationProcedure.\nIt’s shared in each step and available in executing …\nReturns as Any.\nThe table catalog.\nNotifies the RegionSupervisor to deregister failure …\nNotifies the RegionSupervisor to deregister failure …\nElapsed time of downgrading leader region.\nElapsed time of flushing leader region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Peer of migration source.\n<code>datanode_table</code> is stored via previous steps for future use.\nReturns the <code>table_info</code> of VolatileContext if any. …\nReturns the <code>table_info</code> of VolatileContext if any. …\nReturns the <code>table_route</code> of VolatileContext if any. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBroadcasts the invalidate table cache message.\nThe last_entry_id of leader region.\nThe deadline of leader region lease.\nThe last_entry_id of leader metadata region (Only used for …\nMetrics of region migration.\nReturns an <code>DefaultContextFactory</code>.\nYields the next State and Status.\nReturns the next operation’s timeout.\nElapsed time of open candidate region.\n<code>opening_region_guard</code> will be set after the …\nElapsed time of downgrading region and upgrading region.\nReturns the RegionId.\nThe RegionId of migration region.\nNotifies the RegionSupervisor to register failure …\nRemoves the <code>table_route</code> of VolatileContext, returns true …\nResets the <code>leader_region_lease_deadline</code>.\nThe table schema.\nReturns address of meta server.\nSets the <code>leader_region_last_entry_id</code>.\nSets the <code>leader_region_lease_deadline</code> if it does not exist.\nSets the <code>leader_region_metadata_last_entry_id</code>.\n<code>table_info</code> is stored via previous steps for future use.\n<code>table_route</code> is stored via previous steps for future use.\nThe timeout for downgrading leader region and upgrading …\nThe Peer of migration destination.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdates the elapsed time of downgrading leader region.\nUpdates the elapsed time of downgrading leader region.\nUpdates the elapsed time of flushing leader region.\nUpdates the elapsed time of flushing leader region.\nUpdates the elapsed time of open candidate region.\nUpdates the elapsed time of open candidate region.\nUpdates operations elapsed.\nUpdates the elapsed time of downgrading region and …\nUpdates the elapsed time of upgrade candidate region.\nUpdates the elapsed time of upgrade candidate region.\nElapsed time of upgrade candidate region.\nUses lease time of a region as the timeout of closing a …\nBuilds close region instruction.\nCloses the downgraded leader region.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds downgrade region instruction.\nTries to downgrade a leader region.\nDowngrades a leader region.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFlushes the leader region before downgrading it.\nBuilds flush leader region instruction.\nTries to flush a leader region.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nManager of region migration procedure.\nThe guard of running RegionMigrationProcedureTask.\nReturns true if it contains the specific region(<code>region_id</code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the region has been migrated.\nReturns the RegionMigrationProcedureGuard if current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns new <code>RegionMigrationManager</code>\nSubmits a new region migration procedure.\nReturns the <code>RegionMigrationProcedureTracker</code>.\nRegisters the loader of RegionMigrationProcedure to the …\nThrows an error if <code>to_peer</code> is already has a region …\nThrows an error if <code>leader_peer</code> is not the <code>from_peer</code>.\nVerifies the type of region migration table route.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the RegionMigrationAbort with <code>reason</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe behaviors:\nChecks whether the candidate region on region has been …\nReturns the argument unchanged.\nChecks whether the region has been migrated. Returns true …\nCalls <code>U::from(self)</code>.\nReturns true if the region leader is not the <code>from_peer</code>.\nYields next State.\nRetrieves region route.\nUses lease time of a region as the timeout of opening a …\nBuilds open region instructions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpens the candidate region.\nDowngrades the leader region.\nRolls back the downgraded region.\nUpgrades the candidate region.\nReturns new Vec.\nReturns true if region metadata has been updated.\nDowngrades the leader region.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRollbacks the downgraded leader region if the candidate …\nUpgrades the candidate region.\nBuilds upgrade region instruction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to upgrade a candidate region.\nUpgrades a candidate region.\nAn mock implementation of region server that simply echoes …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe data of WAL pruning.\nThe procedure to prune WAL.\nThe state of WAL pruning.\nCheck if the heartbeat collected region ids contains all …\nThe Kafka client.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe leader region registry.\nWAL prune procedure will read the topic-region map from …\nThe mailbox to send messages.\nPrepare the entry id to prune and regions to flush.\nPrune the WAL and persist the minimum prunable entry id.\nSend the flush request to regions with low flush entry id.\nThe minimum flush entry id for topic, which is used to …\nServer address of metasrv.\nThe state.\nThe table metadata manager.\nThe topic name to prune.\nIf <code>prunable_entry_id</code> + <code>trigger_flush_threshold</code> &lt; …\nEvent is used to notify the WalPruneManager to do some …\nWalPruneManager manages all remote WAL related tasks in …\nWalPruneProcedureGuard is a guard for WalPruneProcedure. …\nTracks running WalPruneProcedures and the resources they …\nWalPruneTicker is a ticker that periodically sends Events …\nReturns a mpsc channel with a buffer capacity of 1024 for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a running WalPruneProcedure for the given topic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of running WalPruneProcedures.\nReturns a new empty WalPruneManager.\nProcedure manager.\nReceives Events.\nRetrieve topics from the table metadata manager. Since …\nRuns the main loop. Performs actions on received events.\nSemaphore to limit the number of concurrent …\nSends Events.\nStarts the ticker.\nStops the ticker.\nSubmits a WalPruneProcedure for the given topic name.\nTable metadata manager to restore topics from kvbackend.\nHandle of ticker thread.\nThe interval of tick.\nTracker for running WalPruneProcedures.\nTrigger flush threshold for WalPruneProcedure. If <code>None</code>, …\nStart the WalPruneManager. It will register …\nContext for WalPruneProcedure.\nThe default implementation of Publisher\nThis trait provides a <code>publish</code> method that can be used by …\nSubscribed topic type, determined by the ability of meta.\nThis trait defines how messages are delivered from meta to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSubscriber’s id, globally unique, assigned by leader …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubscriber’s name, passed in by subscriber.\nTransport channel from meta to subscriber.\nThe default implementation of Publisher\nThis trait provides a <code>publish</code> method that can be used by …\nThis trait defines how messages are delivered from meta to …\nSubscriber’s id, globally unique, assigned by leader …\nSubscriber’s name, passed in by subscriber.\nTransport channel from meta to subscriber.\nDetects the region failures.\nRemoves all PhiAccrualFailureDetectors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a FailureDetectorEntry iterator.\nReturns A mutable reference to the …\nReturns <code>PhiAccrualFailureDetector</code> of the specific …\nRemoves the specific PhiAccrualFailureDetector if exists.\nThe information of region lease.\nRenews lease of regions.\nThe result of region lease renewal, contains the renewed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the region is operating.\nCreates a new RegionLeaseInfo with the given region id and …\nReturns None if:\nRenews the lease of regions for specific datanode.\nThe role of region.\nThe default tick interval.\n<code>DatanodeHeartbeat</code> represents the heartbeat signal sent …\n<code>Event</code> represents various types of events that can be …\n<code>HeartbeatAcceptor</code> forwards heartbeats to <code>RegionSupervisor</code>.\nController for managing failure detectors for regions.\nThe <code>RegionSupervisor</code> is used to detect Region failures and …\nSelector for region supervisor.\nA background job to generate <code>Event::Tick</code> type events.\nAccepts heartbeats from datanodes.\nReturns a mpsc channel with a buffer capacity of 1024 for …\nDetects the failure of regions.\nTracks the number of failovers for each region.\nUsed to detect the failure of regions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maintenance mode manager.\nUpdates the state of corresponding failure detectors.\nPeer lookup service\nReceives Events.\nRegion migration manager.\nRuns the main loop.\nCandidate node selector.\nThe context of <code>SelectorRef</code>\nSends Events.\nStarts the ticker.\nStops the ticker.\nThe <code>Option</code> wrapper allows us to abort the job while …\nThe interval of tick.\nThis one randomly selects from all available (in lease) …\nThe current load balancing is based on the number of …\nA selector that aware of region statistics\nThis one selects the node in a round-robin way. In most …\n<code>SelectorType</code> refers to the load balancer used when …\nWhether duplicates are allowed in the selected result, …\nThe peers to exclude from the selection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum number of selected results.\nAccording to the <code>opts</code>, choose peers from the <code>weight_array</code> …\nFilter out the excluded peers from the <code>weight_array</code>.\nSelect all alive datanodes based using a random weighted …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRound-robin selector that returns the next peer in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe [‘RegionNumsBasedWeightCompute’] calculates …\nThe <code>WeightCompute</code> trait is used to compute the weight …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA implementation of weighted balance: random weighted …\nA common trait for weighted balance algorithm.\nThe struct represents a weighted item.\nThe method will choose multiple items.\nThe method will choose one item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the weight_array is empty.\nReturns the length of the weight_array.\nContains the error value\nContains the success value\nReturns a BoxBody from a string. The implementation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe mailbox receiver\nGet the channel of the mailbox receiver\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the message id of the mailbox receiver\n<code>ToString::to_string</code>, but without panic on OOM.\nThe pusher deregister signal receiver\nThe <code>MailboxMessage</code> receiver\nA cache dedicated to a Leader node, in order to cache some …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe caller MUST ensure during the loading, there are no …\nWith a leader checker which always returns true when …\nState transition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a specified number (by <code>regions</code>) of <code>Peer</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MetasrvPeerAllocator</code> with the given …")