searchState.loadedDescShard("common_error", 0, "Create a http header map from error code and message. …\nUtils for mock.\nAn opaque boxed error based on errors that implement …\nExtension to <code>Error</code> in std.\nError type with plain error message\nReturns the error as Any so that it can be downcast to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind out root level error for nested error\nMap this error to StatusCode.\nIndicates whether this error is “transparent”, that it …\nA mock error mainly for test.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MockError without backtrace.\nCreate a new MockError with source.\nIllegal request to connect catalog-schema.\nNot found http authorization header.\nThe task is cancelled (typically caller-side).\nDatabase already exists.\nDatabase not found.\nThe request is deadline exceeded (typically server-side).\nThe query engine fail to execute query.\nCaused by some error originated from external system.\nIllegal state, can be exposed to users.\nInternal server error.\nInvalid arguments.\nInvalid http authorization header.\nSQL Syntax error.\nUser is not authorized to perform the operation.\nFail to create a plan for the query.\nRate limit exceeded.\nRegion already exists.\nRegion is temporarily in busy state.\nRegion not found.\nRegion is not in a proper state to handle specific request.\nRegion is read-only in current state.\nRequest is outdated, e.g., version mismatch.\nRuntime resources exhausted, like creating threads failed.\nCommon status code for public API.\nAn iterator over the variants of StatusCode\nStorage is temporarily unable to handle the request.\nSuccess.\nTable already exists.\nTable column already exists.\nTable column not found.\nTable not found.\nTable is temporarily unable to handle the request.\nUnexpected error, maybe there is a BUG.\nUnknown error.\nUnsupported operation.\nUnsupported password type.\nUser not exist.\nUsername and password does not match.\nConverts tonic Code to StatusCode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create Self from the raw representation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error with this code is retryable.\nReturns <code>true</code> if <code>code</code> is success.\nReturns <code>true</code> if we should print an error log for an error …\nReturns the tonic Code of a StatusCode.")