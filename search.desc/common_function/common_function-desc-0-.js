searchState.loadedDescShard("common_function", 0, "Ensure current function is invokded under <code>greptime</code> catalog.\nfunctions registry\nTable functions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister all table functions to <code>FunctionRegistry</code>.\nA function to add a follower to a region. Only available …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function to $display_name\nA function to $display_name\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompact type: strict window.\nCompact type: strict window (short name).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses <code>compact_table</code> UDF parameters. This function accepts …\nParses compaction strategy type. For <code>strict_window</code> or <code>swcs</code> …\nThe default timeout for migrate region procedure.\nA function to migrate a region from source peer to target …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function to remove a follower from a region.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nTwo UDAFs are implemented for HyperLogLog:\nCalls <code>U::from(self)</code>.\nImplementation of the <code>uddsketch_state</code> UDAF that generate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a UDF for the <code>hll_merge</code> function.\nCreate a UDF for the <code>hll</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a UDF for the <code>uddsketch_merge</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAccumulator of lat, lng, timestamp tuples\nThis function accept rows of lat, lng and timestamp, sort …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AggregateUDF</code> for the <code>json_encode_path</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAggregates by multiplying elements across the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AggregateUDF</code> for the <code>vec_product</code> aggregate …\nThe accumulator for the <code>vec_sum</code> aggregate function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AggregateUDF</code> for the <code>vec_sum</code> aggregate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAsync Scalar function trait\nScalar function trait, modified from databend to adapt …\nThe function execution context\nEvaluate the function, e.g. run/execute the function.\nEvaluate the function, e.g. run/execute the function. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the name of the function, should be unique.\nReturns the name of the function, should be unique.\nThe returned data type of function execution.\nThe returned data type of function execution.\nThe signature of function.\nThe signature of function.\nA factory for creating <code>ScalarUDF</code> that require a function …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the name of the function.\nReturns a <code>ScalarUDF</code> when given a function context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis flow service handler is only use for flush flow for …\nA trait for handling procedure service requests in …\nA trait for handling table mutations in <code>QueryEngine</code>.\nAdd a region follower to a region.\nGet the catalog manager\nTrigger a compaction task for table.\nTrigger a compaction task for a table region.\nDelete rows from the table.\nTrigger a flush task for table.\nTrigger a flush task for a table region.\nInserts rows into the table.\nMigrate a region from source peer to target peer, returns …\nQuery the procedure’ state by its id\nRemove a region follower from a region.\nCast a <code>ValueRef</code> to u64, returns <code>None</code> if fails\nCreate a function signature with oneof signatures of …\nImplementation of the scalar function <code>hll_count</code>.\nImplementation of the scalar function <code>uddsketch_calc</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function adds an interval value to Timestamp, Date, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function that formats timestamp/date/datetime into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function subtracts an interval value to Timestamp, Date, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe function to check whether an expression is NULL\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFunction that return geohash string for a given geospatial …\nFunction that return geohash string for a given geospatial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction that returns base cell of given cell id\nFunction that returns center child cell of given cell id\nFunction that returns centroid latitude and longitude of …\nTests if cells contains given cells\nGet Euclidean distance of two cell centroid\nGet WGS84 great circle distance of two cell centroid\nFunction that check if given cell id is a pentagon\nFunction that returns parent cell of given cell id and …\nFunction that returns resolution of given cell id\nFunction that returns the cell position if its parent at …\nFunction that returns children cell list\nFunction that returns children cell count\nFunction that converts cell id to its string form\nFunction that returns the cell at given position of the …\nFunction that returns cells with k distances of given cell\nFunction that returns all cells within k distances of …\nFunction that returns distance between two cells\nFunction that returns path cells between two cells\nFunction that returns h3 encoding cellid for a given …\nFunction that returns h3 encoding cellid in string form …\nFunction that converts cell string id to uint64 number\nextract cell array from all possible types including:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn area of given geometry object\nReturn WGS84(SRID: 4326) euclidean distance between two …\nReturn great circle distance between two geometry object, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if spatial relationship: contains\nTest if spatial relationship: within\nTest if spatial relationship: within\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the level of current s2 cell\nReturn parent at given level of current s2 cell\nReturn the string presentation of the cell\nFunction that returns s2 encoding cellid for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn WGS84(SRID: 4326) euclidean distance between two …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHllCalcFunction implements the scalar function <code>hll_count</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFunction that converts an IPv4 address string to CIDR …\nFunction that converts an IPv6 address string to CIDR …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction that converts a UInt32 number to an IPv4 address …\nFunction that converts a string representation of an IPv4 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction that converts a hex string representation of an …\nFunction that converts a string representation of an IPv6 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction that checks if an IPv4 address is within a …\nFunction that checks if an IPv6 address is within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the value from the JSONB by the given path and return …\nGet the value from the JSONB by the given path and return …\nGet the value from the JSONB by the given path and return …\nGet the value from the JSONB by the given path and return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value from the JSONB by the given path and return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the input is a JSON object of the given type.\nCheck if the given JSON data contains the given JSON path.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the given JSON data match the given JSON path’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts the <code>JSONB</code> into <code>String</code>. It’s useful for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses the <code>String</code> into <code>JSONB</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n“AND”\nFlattened binary chains\n“)”\nA sub-tree enclosed by parenthesis\nA leaf node that matches a column with <code>pattern</code>\n<code>matches</code> for full text search.\n“+”\n“-”\n“(”\nThis is not a token from user input, but a placeholder for …\n“OR”\nAny other phases\nAdd <code>Token::Optional</code> for all bare <code>Token::Phase</code> and <code>Token::Or</code>\nCollapse binary branch with the same operator. I.e., this …\nCurrent <code>cursor</code> points to the first character of the phase. …\nEliminate optional pattern. An optional pattern can always …\nEliminate single child <code>PatternAst::Binary</code> node. If a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert infix token stream to RPN\nTransform this AST with preset rules to make it correct.\nA compiled finder for <code>matches_term</code> function that holds the …\nExact term/phrase matching function for text columns.\nFind the term in the text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>MatchesTermFinder</code> for the given term.\n<code>RangeFunction</code> will never be used as a normal function, …\ngenerates rates from a sequence of adjacent data points.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>range_fn</code> will never been used. As long as a legal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe function to find remainders\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ngenerates rates from a sequence of adjacent data points.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function to convert the column into the unix timestamp …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUddSketchCalcFunction implements the scalar function …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a ScalarUdf from function, query context and state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function calculates the distance between two vectors.\nA function calculates the distance between two vectors.\nA function calculates the distance between two vectors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the cos distance between two vectors.\nCalculates the dot product between two vectors.\nCalculates the squared L2 distance between two vectors.\nMultiplies all elements of the vector, returns a scalar.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a string or binary literal to a vector literal.\nConvert a constant string or binary literal to a vector …\nConvert a u8 slice to a vector literal.\nParse a string literal to a vector literal. Valid inputs …\nConvert a vector literal to a binary literal.\nAdds a scalar to each element of a vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiples a scalar to each element of a vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds corresponding elements of two vectors, returns a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the dimension of the vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDivides corresponding elements of two vectors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the k-th(0-based index) element of the vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiplies corresponding elements of two vectors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNormalizes the vector to length 1, returns a vector. This…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSubtracts corresponding elements of two vectors, returns a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a subvector from start(included) to end(excluded) …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShared state for SQL functions. The handlers in state may …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates build information\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function to return current schema name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA function to query procedure state by its id. Such as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA function to return current session timezone.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA random state with fixed seeds.\nEscapes special characters in the provided pattern string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")