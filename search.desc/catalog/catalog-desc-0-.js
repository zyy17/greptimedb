searchState.loadedDescShard("catalog", 0, "Hook called after system table opening.\nRegister system table request:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if <code>schema</code> is a reserved schema name\nReturns the table by catalog, schema and table name.\nReturns all tables with a stream by catalog and schema.\nReturns the tables by table ids.\nSNAFU context selector for the <code>Error::CacheNotFound</code> variant\nSNAFU context selector for the <code>Error::CastManager</code> variant\nSNAFU context selector for the <code>Error::CatalogNotFound</code> …\nSNAFU context selector for the <code>Error::ConvertProtoData</code> …\nSNAFU context selector for the <code>Error::CreateRecordBatch</code> …\nSNAFU context selector for the <code>Error::CreateTable</code> variant\nSNAFU context selector for the <code>Error::Datafusion</code> variant\nSNAFU context selector for the <code>Error::DecodePlan</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FindPartitions</code> …\nSNAFU context selector for the <code>Error::FindRegionRoutes</code> …\nSNAFU context selector for the <code>Error::FlowInfoNotFound</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::GetTableCache</code> variant\nSNAFU context selector for the <code>Error::GetViewCache</code> variant\nSNAFU context selector for the <code>Error::Internal</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Json</code> variant\nSNAFU context selector for the <code>Error::ListCatalogs</code> variant\nSNAFU context selector for the <code>Error::ListFlowStats</code> variant\nSNAFU context selector for the <code>Error::ListFlows</code> variant\nSNAFU context selector for the <code>Error::ListNodes</code> variant\nSNAFU context selector for the <code>Error::ListProcedures</code> …\nSNAFU context selector for the <code>Error::ListRegionStats</code> …\nSNAFU context selector for the <code>Error::ListSchemas</code> variant\nSNAFU context selector for the <code>Error::ListTables</code> variant\nContains the success value\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ProcedureIdNotFound</code> …\nSNAFU context selector for the <code>Error::ProjectViewColumns</code> …\nSNAFU context selector for the <code>Error::QueryAccessDenied</code> …\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::TableExists</code> variant\nSNAFU context selector for the <code>Error::TableMetadataManager</code> …\nSNAFU context selector for the <code>Error::TableNotExist</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ViewInfoNotFound</code> …\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper of <code>MetaKvBackend</code> with cache support.\nAccess all existing catalog, schema and tables.\nTableCache caches the TableName to TableRef mapping.\nCache registry for all caches.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides the extension methods for the <code>information_schema</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a TableCache.\nManages partition rules.\nOnly available in <code>Standalone</code> mode.\nA sub-CatalogManager that handles system tables\nManages table metadata.\nA wrapper of <code>MetaKvBackend</code> with cache support.\nConstructs a MetaKvBackend.\nAccess all existing catalog, schema and tables.\nExisting system tables:\nCache registry for all caches.\nReturns the argument unchanged.\nReturns the [<code>InformationExtension</code>].\nProvides the extension methods for the <code>information_schema</code> …\nCalls <code>U::from(self)</code>.\nManages partition rules.\nOnly available in <code>Standalone</code> mode.\nA sub-CatalogManager that handles system tables\nManages table metadata.\nTableCache caches the TableName to TableRef mapping.\nConstructs a TableCache.\nSimple in-memory list of catalogs\nCollection of catalogs containing schemas and ultimately …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a memory catalog list contains a numbers table for …\nRegisters a catalog if it does not exist and returns false …\nRegisters a schema if it does not exist. It returns an …\nRegisters a schema and returns an error if the catalog or …\nCreates a manager with some default setups (e.g. default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the TableRef by table name.\nReturns table names in the order of table id.\nReturns a map of TableRef in information schema.\nThe <code>InformationExtension</code> trait provides the extension …\nThe <code>information_schema</code> tables info provider.\nGet the flow statistics. If no flownode is available, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the nodes information.\nGets the procedures information.\nGets the region statistics.\nAll table names in <code>information_schema</code>.\nThe <code>CLUSTER_INFO</code> table provides information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.cluster_info</code> virtual table\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.columns</code> virtual table\nThe <code>information_schema.flows</code> to provides information about …\nBuilds the <code>information_schema.FLOWS</code> table row by row\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.flows</code> virtual table\nfor complex fields(including <code>SOURCE_TABLE_IDS</code>, <code>FLOWNODE_IDS</code>…\nFind the schema and columns by the table_name, only valid …\nFulltext index constraint name\nInverted index constraint name\nPrimary key constraint name\nSkipping index constraint name\nTime index constraint name\nThe type of the index.\nFulltext index bloom type\nFulltext index v1 type\nInverted index type\nPrimary key index type\nSkipping index type\nThe virtual table implementation for …\nBuilds the <code>information_schema.KEY_COLUMN_USAGE</code> table row …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.KEY_COLUMN_USAGE</code> virtual …\nThe region id\nThe <code>PARTITIONS</code> table provides information about …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.partitions</code> virtual table\nThe <code>PROCEDURE_INFO</code> table provides information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.procedure_info</code> virtual …\nThe <code>REGION_PEERS</code> table provides information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.region_peers</code> virtual table\nThe <code>REGION_STATISTICS</code> table provides information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>InformationSchemaRegionStatistics</code> from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>information_schema.schemata</code> table implementation.\nBuilds the <code>information_schema.schemata</code> table row by row\nThe database options\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.schemata</code> virtual table\nThe <code>TABLE_CONSTRAINTS</code> table describes which tables have …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.table_constraints</code> virtual …\nBuilds the <code>information_schema.TABLE</code> table row by row\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.tables</code> virtual table\nThe <code>information_schema.views</code> to provides information about …\nBuilds the <code>information_schema.VIEWS</code> table row by row\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.views</code> virtual table\nA memory table with specified schema and columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.{table_name}</code> virtual table\nCreates a memory table with table id, name, schema and …\nThe column name for the OID column. The OID column is a …\n<code>PGCatalogProvider</code> is the provider for a schema named …\nProvide query context to call the <code>CatalogManager</code>’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pg_catalog.pg_namespace</code> table implementation. …\nThe dummy owner id for the namespace.\nThe initial capacity of the vector builders.\nThe <code>pg_catalog.pg_class</code> table implementation.\nBuilds the <code>pg_catalog.pg_class</code> table row by row …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe initial capacity of the vector builders.\nBuilds the <code>pg_catalog.pg_database</code> table row by row <code>oid</code> use …\nThe <code>pg_catalog.database</code> table implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds the <code>pg_catalog.pg_namespace</code> table row by row <code>oid</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>pg_catalog.pg_namespace</code> virtual table\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPredicate to filter <code>information_schema</code> tables stream, we …\nA list of predicate\nEvaluate the predicates with the row. returns true when …\nEvaluate the predicate with the row, returns:\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create a predicate from datafusion <code>Expr</code>, return …\nTry its best to create predicates from <code>ScanRequest</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when the values are all [<code>DfExpr::Literal</code>].\nPerform SQL left LIKE right, return <code>None</code> if fail to …\nTry to get the <code>[InformationExtension]</code> from <code>[CatalogManager]</code>…\nTry to get the <code>[TableMetadataManagerRef]</code> from …\nDummy catalog for region server.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDelegate the resolving requests to the <code>[CatalogManager]</code> …\nA dummy catalog provider for DummyCatalogList.\nA dummy schema provider for DummyCatalogList.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new catalog list with the given catalog manager.")