searchState.loadedDescShard("cli", 0, "Restore metadata snapshot tool. This tool is used to …\nExport metadata snapshot tool. This tool is used to export …\nServer address to connect\nServer address to connect\nThe basic authentication for connecting to the server\nThe basic authentication for connecting to the server\nThe connection to the metadata store.\nThe connection to the metadata store.\nThe name of the catalog to export.\nThe name of the catalog to import.\nif both <code>ddl_local_dir</code> and remote storage (s3/oss) are set, …\nA half-open time range: [start_time, end_time). The end of …\nParallelism of the export.\nThe name of the target snapshot file. we will add the file …\nThe name of the target snapshot file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParallelism of the import.\nDirectory of the data. E.g.: /tmp/greptimedb-backup\nThe directory to store the snapshot file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax retry times for each job.\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nDisable proxy server, if set, will not use any proxy.\nif export data to oss\nThe oss access key id if oss is set, this is required\nThe oss access key secret if oss is set, this is required\nThe oss bucket name if oss is set, this is required\nThe oss endpoint if oss is set, this is required\nDirectory to put the exported data. E.g.: …\nThe directory to store the snapshot file. if target output …\nThe proxy server address to connect, if set, will override …\nThe proxy server address to connect, if set, will override …\nif export data to s3\nThe s3 access key if s3 is set, this is required\nThe s3 bucket name if s3 is set, this is required\nThe s3 config.\nThe s3 config.\nThe s3 endpoint if s3 is set, this is required\nThe s3 region if s3 is set, this is required\nif s3 is set, this is required\nThe s3 secret key if s3 is set, this is required\nA half-open time range: [start_time, end_time). The start …\nThings to export\nThings to export\nThe timeout of invoking the database.\nThe timeout of invoking the database.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSplit at <code>-</code>.\nExecute sql query.\nSNAFU context selector for the <code>Error::BuildCacheRegistry</code> …\nSNAFU context selector for the <code>Error::BuildClient</code> variant\nSNAFU context selector for the <code>Error::BuildRuntime</code> variant\nSNAFU context selector for the <code>Error::CacheRequired</code> variant\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the <code>Error::CreateDir</code> variant\nSNAFU context selector for the <code>Error::EmptyResult</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FileIo</code> variant\nSNAFU context selector for the <code>Error::HttpQuerySql</code> variant\nSNAFU context selector for the <code>Error::IllegalConfig</code> variant\nSNAFU context selector for the <code>Error::InitDdlManager</code> …\nSNAFU context selector for the <code>Error::InitMetadata</code> variant\nSNAFU context selector for the <code>Error::InitTimezone</code> variant\nSNAFU context selector for the <code>Error::InitTlsProvider</code> …\nSNAFU context selector for the <code>Error::KvBackendNotSet</code> …\nSNAFU context selector for the <code>Error::LoadLayeredConfig</code> …\nSNAFU context selector for the <code>Error::MetaClientInit</code> …\nSNAFU context selector for the <code>Error::MissingConfig</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::OpenDal</code> variant\nSNAFU context selector for the <code>Error::Other</code> variant\nSNAFU context selector for the <code>Error::OutputDirNotSet</code> …\nSNAFU context selector for the <code>Error::ParseProxyOpts</code> …\nSNAFU context selector for the <code>Error::ParseSql</code> variant\nSNAFU context selector for the <code>Error::PlanStatement</code> variant\nSNAFU context selector for the <code>Error::S3ConfigNotSet</code> …\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SpawnThread</code> variant\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nExport all table schemas and data at once.\nExport all table data, corresponding to <code>COPY DATABASE TO</code>.\nExport all table schemas, corresponding to …\nServer address to connect\nIterate over all db names.\nThe basic authentication for connecting to the server\nbuild operator with preference for file system\nBuilds the WITH options string for SQL commands, assuming …\nThe name of the catalog to export.\nif both <code>ddl_local_dir</code> and remote storage (s3/oss) are set, …\nA half-open time range: [start_time, end_time). The end of …\nParallelism of the export.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of <code>TableReference</code> to be exported. Includes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMask sensitive information in SQL commands for safe logging\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nif export data to oss\nThe oss access key id if oss is set, this is required\nThe oss access key secret if oss is set, this is required\nThe oss bucket name if oss is set, this is required\nThe oss endpoint if oss is set, this is required\nDirectory to put the exported data. E.g.: …\nThe proxy server address to connect, if set, will override …\nif export data to s3\nThe s3 access key if s3 is set, this is required\nThe s3 bucket name if s3 is set, this is required\nThe s3 endpoint if s3 is set, this is required\nThe s3 region if s3 is set, this is required\nif s3 is set, this is required\nThe s3 secret key if s3 is set, this is required\nA half-open time range: [start_time, end_time). The start …\nThings to export\nThe timeout of invoking the database.\nExport all table schemas and data at once.\nImport all table data into the database.\nImport all table schemas into the database.\nServer address to connect\nThe basic authentication for connecting to the server\nThe name of the catalog to import.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParallelism of the import.\nDirectory of the data. E.g.: /tmp/greptimedb-backup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nThe proxy server address to connect, if set, will override …\nThings to export\nThe timeout of invoking the database.\nRestore metadata snapshot tool. This tool is used to …\nExport metadata snapshot tool. This tool is used to export …\nThe database backend.\nThe connection to the metadata store.\nThe connection to the metadata store.\nThe name of the target snapshot file. we will add the file …\nThe name of the target snapshot file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe directory to store the snapshot file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe directory to store the snapshot file. if target output …\nwhether to use s3 as the output directory. default is …\nThe s3 access key.\nThe s3 bucket name.\nThe s3 config.\nThe s3 config.\nThe s3 endpoint. we will automatically use the default s3 …\nThe s3 region.\nThe s3 secret key.\nThe endpoint of store. one of etcd, pg or mysql.")