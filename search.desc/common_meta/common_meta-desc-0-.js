searchState.loadedDescShard("common_meta", 0, "Schema options.\nThis mod defines all the keys used in the metadata store …\nSkip the test if the environment variable …\nSkip the test if the environment variable …\nCacheContainer provides ability to:\nCacheRegistry provides ability of\nCacheRegistryBuilder provides ability of\nInitializes value (i.e., fetches from remote).\nInvalidates cached values by [CacheToken]s.\nLayeredCacheRegistry invalidate caches sequentially from …\nLayeredCacheRegistry Builder.\nTableFlownodeSetCache caches the TableId to [FlownodeSet] …\nTableInfoCache caches the TableId to TableInfo mapping.\nTableNameCache caches the TableName to TableId mapping.\nTableRoute stores <code>Arc</code> wrapped table route.\nTableRouteCache caches the TableId to TableRoute mapping.\nFilters out unused [CacheToken]s\nViewInfoCache caches the TableId to ViewInfoValue mapping.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a SchemaCache.\nConstructs a TableFlownodeSetCache.\nConstructs a TableInfoCache.\nConstructs a TableNameCache.\nConstructs a TableRouteCache.\nConstructs a TableSchemaCache.\nConstructs a ViewInfoCache.\nCacheContainer provides ability to:\nInitializes value (i.e., fetches from remote).\nInvalidates cached values by [CacheToken]s.\nFilters out unused [CacheToken]s\nReturns true if the cache contains a value for the key.\nReturns a <em>clone</em> of the value corresponding to the key.\nReturns a <em>clone</em> of the value corresponding to the key.\nInvalidates cache by [CacheToken].\nReturns the <code>name</code>.\nConstructs an CacheContainer.\nFlow id&amp;flow partition key\ncache for TableFlowManager, the table_id part is in the …\nTableFlownodeSetCache caches the TableId to [FlownodeSet] …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a TableFlownodeSetCache.\nCacheRegistry provides ability of\nCacheRegistryBuilder provides ability of\nLayeredCacheRegistry invalidate caches sequentially from …\nLayeredCacheRegistry Builder.\nAdds the cache.\nAdds CacheRegistry into the next layer.\nBuilds the LayeredCacheRegistry\nBuilds CacheRegistry.\nReturns <strong>cloned</strong> the value stored in the collection for the …\nReturns <strong>cloned</strong> the value stored in the collection for the …\nReturns <strong>cloned</strong> the value stored in the collection for the …\nSets the value stored in the collection for the type <code>T</code>. …\nCache for table id to schema name mapping.\nConstructs a SchemaCache.\nTableInfoCache caches the TableId to TableInfo mapping.\nConstructs a TableInfoCache.\nTableNameCache caches the TableName to TableId mapping.\nConstructs a TableNameCache.\nTableRoute stores <code>Arc</code> wrapped table route.\nTableRouteCache caches the TableId to TableRoute mapping.\nReturns PhysicalTableRouteValue reference if it’s …\nReturns true if it’s physical table.\nConstructs a TableRouteCache.\nNever invalidates table id schema cache.\nNever invalidates table id schema cache.\nConstructs a TableSchemaCache.\nViewInfoCache caches the TableId to ViewInfoValue mapping.\nConstructs a ViewInfoCache.\nPlaces context of invalidating cache. e.g., span id, trace …\nKvBackend cache invalidator\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClusterInfo provides information about the cluster.\nThe status of a datanode.\nThe status of a flownode.\nThe status of a frontend.\nThe status of a metasrv.\nThe information of a node in the cluster.\nThe key of NodeInfo in the storage. The format is …\nCalculate (by using the DefaultHasher) the node’s id …\nHow many follower regions on this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast activity time in milliseconds.\nHow many leader regions on this node.\nList all flow stats in the cluster.\nList all nodes by role in the cluster. If <code>role</code> is <code>None</code>, …\nList all region stats in the cluster.\nTry to create a <code>NodeInfoKey</code> from a “good” heartbeat …\nThe node id.\nThe peer information. [node_id, address]\nThe read capacity units during this period.\nThe role of the node. It can be <code>[Role::Datanode]</code> or …\nThe status of the node. Different roles have different …\nThe write capacity units during this period.\nThe workloads of the datanode.\nThe key of the datanode stat in the memory store.\nThe value of the datanode stat in the memory store.\nThe statistics of a region.\nThe key of the datanode stat in the storage.\nApproximate disk bytes of this region, including sst, …\nThe latest entry id of topic used by data. <strong>Only used by </strong>…\nThe datanode workloads.\nThe engine name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe region_id.\nThe size of the SST index files in bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of the manifest in bytes.\nThe size of the memtable in bytes.\nThe latest entry id of topic used by metadata. <strong>Only used </strong>…\nGet the latest node addr.\nThe number of rows\nThe key prefix.\nThe read capacity units during this period\nThe read capacity units during this period\nThe manifest infoof the region.\nGet the latest number of regions.\nHow many regions on this node\nReturns a tuple array containing RegionId and RegionRole.\nRetains the active region stats and updates the rcus, …\nThe region role.\nThe size of the SST data files in bytes.\nReturns all table ids in the region stats.\nThe write capacity units during this period\nThe write capacity units during this period\nThe context of ddl.\nA noop implementation of <code>RegionFailureDetectorController</code>.\nThe procedure executor that accepts ddl, region migration …\nUsed for actively registering Region failure detectors.\nMetadata allocated to a table.\nAdd a region follower\nCache invalidation.\nDeregisters failure detectors for the given identifiers.\nNotifies the RegionSupervisor to remove failure detectors.\nAllocator for flow metadata.\nFlow metadata manager.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe leader region registry.\nKeep tracking operating regions.\nSubmit a region migration task\nSends querying and requests to nodes.\nQuery the procedure state by its id\ncontroller of region failure detector.\nThe encoded wal options for regions of the table.\nRegisters failure detectors for the given identifiers.\nNotifies the RegionSupervisor to register failure detector …\nRemove a region follower\nSubmit a ddl task\nTable id.\nAllocator for table metadata.\nTable metadata manager.\nRoute information for each region of the table.\nThe data of alter database procedure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBroadcasts the invalidating table cache instruction.\nPrepares to alter the table\nUpdates table metadata.\nClears all data fields except <code>state</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPhysical table info\nTable info values before the alter operation. …\nThe alter table procedure\nBroadcasts the invalidating table cache instruction.\nPrepares to alter the table.\nSends alter region requests to Datanode.\nUpdates table metadata.\nBuilds new table info after alteration. It bumps the …\nChecks:\nThe runtime context.\nThe serialized data.\nFetches the table info.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes alter region request from existing an alter kind. …\nMakes alter kind proto that all regions can reuse. Region …\nCached new table metadata in the prepare step. If we …\nBroadcasts the invalidating table cache instructions.\nUpdate table metadata.\nUpdates table metadata for alter table operation.\nUpdates table metadata for rename table operation.\nRegion distribution for table in case we need to update …\nTable info value before alteration.\nCreates region proto alter kind from <code>table_info</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe flow is a batching task.\nThe serializable data.\nThe procedure of flow creation.\nThe state of CreateFlowProcedure.\nCreates flows on the flownode.\nCreate metadata.\nThe type of flow.\nInvalidate flow cache.\nPrepares to create the flow.\nThe flow is a streaming task.\nAllocates the [FlowId].\nEnsures all source tables exist and collects source table …\nOnly set to true when replace actually happened. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes from <code>json</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new CreateFlowProcedure.\nCreates flow metadata.\nFor verify if prev value is consistent when need to update …\nCreates metadata\nCreates regions on the Datanode\nPrepares to create the tables\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates table metadata for logical tables and update …\nOn the prepares step, it performs:\nReturns the remaining tasks. The length of tasks must be …\nCreates metadata\nCreates regions on the Datanode\nPrepares to create the table\nThe serializable data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates table metadata\nCreates regions on datanodes\nOn the prepare step, it performs:\nThe guards of opening.\nNone stands for not allocated yet.\nRegisters and returns the guards of the opening region if …\nNone stands for not allocated yet.\nBuilder for [PbCreateRegionRequest].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional. Only for metric engine.\nCreates metadata\nPrepares to create the table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to update the view info.\nCreates view metadata\nOn the prepare step, it performs:\nContext of DropDatabaseProcedure execution.\nTarget of dropping tables.\nReturns as Any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields the next State and Status.\nThe hook is called during the recovery.\nThe context of procedure runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new DropDatabaseCursor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new DropDatabaseExecutor.\nThe physical table region routes.\nRegisters the operating regions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates frontend caches\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether schema exists.\nDeletes metadata\nThe serializable data\nThe procedure for dropping a flow.\nThe state of drop flow\nDrop flows on flownode\nInvalidate flow cache\nPrepares to drop the flow\nThe context of procedure runtime.\nThe serializable data.\nFetches the flow info.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether flow exists.\nDrops regions on Datanode\nDeletes metadata logically\nDeletes metadata tombstone permanently\nThe state of drop table.\nInvalidates Table Cache\nPrepares to drop the table\nThe context of procedure runtime.\nThe serializable data.\nThe guards of opening regions.\nThe drop table executor.\nFetches the table info and physical table route.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBroadcasts invalidate table cache instruction.\nRemoves the table metadata.\nDeletes metadata tombstone.\nRegister dropping regions if doesn’t exist.\nControl indicated to the caller whether to go to the next …\nDropTableExecutor performs:\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates frontend caches\nReturns the DropTableExecutor.\nDeletes the table metadata <strong>logically</strong>.\nDeletes the table metadata tombstone <strong>permanently</strong>.\nDeletes metadata for table <strong>permanently</strong>.\nDrops region on datanode.\nChecks whether table exists.\nRestores the table metadata.\nReturns true if it’s Control::Stop.\nDeletes metadata\nThe serializable data\nThe procedure for dropping a view.\nThe state of drop view\nInvalidate view cache\nPrepares to drop the view\nThe context of procedure runtime.\nThe serializable data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether view exists.\nFlowMetadataAllocator provides the ability of:\nThe reference of FlowMetadataAllocator.\nAllocates Peers for partitions.\nPartitionPeerAllocatorRef allocates Peers for partitions.\nAllocates Peer nodes for storing partitions.\nAllocates a the FlowId.\nAllocates the FlowId and Peers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the FlowMetadataAllocator with …\nGenerate the new physical table info.\n<code>PeerAllocator</code> allocates <code>Peer</code>s for creating regions.\nAllocates <code>regions</code> size <code>Peer</code>s.\nCreate VIEW metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>TestAlterTableExpr</code>.\nError type for TestAlterTableExprBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>TestAlterTableExpr</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>TestColumnDef</code>.\nError type for TestColumnDefBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>TestColumnDef</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>TestCreateTableExpr</code>.\nError type for TestCreateTableExprBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>TestCreateTableExpr</code>.\nBuilds RawTableInfo from CreateTableExpr.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSNAFU context selector for the <code>MockRequestOutdatedError</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTruncates regions on Datanode\nPrepares to truncate the table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of multiple operations.\nAdds Peer context if the error is unretryable.\nConverts a list of <code>RegionRoute</code> to a list of <code>DetectingRegion</code>…\nExtracts region wal options from DatanodeTableValues.\nReturns the argument unchanged.\nExtracts catalog and schema from the path that created by …\nHandles the results of alter region requests.\nCalls <code>U::from(self)</code>.\nMaps the error to the corresponding procedure error.\nParses manifest infos from extensions.\nParses WalOptions from serialized strings in hashmap.\nSync follower regions on datanodes.\nThe DdlManager provides the ability to execute Ddl.\nBuilder for <code>DdlManager</code>.\nError type for DdlManagerBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>DdlManager</code>.\nReturns the DdlContext\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the <code>[CreateViewTask]</code> and returns the DDL response …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters all Ddl loaders.\nSubmits and executes alter multiple table tasks.\nSubmits and executes an alter table task.\nSubmits and executes a create database task.\nSubmits and executes a create flow task.\nSubmits and executes a create multiple logical table tasks.\nSubmits and executes a create table task.\nSubmits and executes a <code>[CreateViewTask]</code>.\nSubmits and executes a drop table task.\nSubmits and executes a drop flow task.\nSubmits and executes a drop table task.\nSubmits and executes a drop view task.\nSubmits and executes a truncate table task.\nReturns the TableMetadataManagerRef.\nReturns a new DdlManager with all Ddl BoxedProcedureLoader…\nWhen creating table or region failover, a target node …\nThe frontend will also send heartbeats to Metasrv, sending …\nHeartbeat interval time (is the basic unit of various …\nThe default mailbox round-trip timeout.\nIn a lease, there are two opportunities for renewal.\nThe lease seconds of metasrv leader.\nThe keep-alive interval of the Postgres connection.\nThe lease seconds of a region. It’s set by 3 heartbeat …\nSNAFU context selector for the <code>Error::AbortProcedure</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::BuildKafkaClient</code> …\nSNAFU context selector for the <code>Error::BuildKafkaCtrlClient</code> …\nSNAFU context selector for the <code>Error::BuildTableMeta</code> …\nSNAFU context selector for the <code>Error::CacheNotGet</code> variant\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ConvertRawKey</code> variant\nSNAFU context selector for the <code>Error::ConvertRawTableInfo</code> …\nSNAFU context selector for the <code>Error::CreateKafkaWalTopic</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::CreateMySqlPool</code> …\nSNAFU context selector for the <code>Error::CreatePostgresPool</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::DecodeJson</code> variant\nSNAFU context selector for the <code>Error::DecodeProto</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::DeserializeFromJson</code> …\nSNAFU context selector for the <code>Error::EmptyDdlTasks</code> variant\nSNAFU context selector for the <code>Error::EmptyKey</code> variant\nSNAFU context selector for the <code>Error::EmptyTopicPool</code> …\nSNAFU context selector for the <code>Error::EncodeJson</code> variant\nSNAFU context selector for the <code>Error::EncodeWalOptions</code> …\nContains the error value\nSNAFU context selector for the <code>Error::EtcdFailed</code> variant\nSNAFU context selector for the <code>Error::EtcdTxnFailed</code> variant\nSNAFU context selector for the <code>Error::EtcdTxnOpResponse</code> …\nSNAFU context selector for the <code>Error::External</code> variant\nSNAFU context selector for the <code>Error::FlowAlreadyExists</code> …\nSNAFU context selector for the <code>Error::FlowNotFound</code> variant\nSNAFU context selector for the <code>Error::FlowRouteNotFound</code> …\nSNAFU context selector for the <code>Error::FromUtf8</code> variant\nSNAFU context selector for the <code>Error::GetCache</code> variant\nSNAFU context selector for the <code>Error::GetKvCache</code> variant\nSNAFU context selector for the <code>Error::GetPostgresConnection</code>…\nSNAFU context selector for the <code>Error::IllegalServerState</code> …\nSNAFU context selector for the <code>Error::InvalidFileExtension</code> …\nSNAFU context selector for the <code>Error::InvalidFileName</code> …\nSNAFU context selector for the <code>Error::InvalidFilePath</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidMetadata</code> …\nSNAFU context selector for the <code>Error::InvalidNodeInfoKey</code> …\nSNAFU context selector for the <code>Error::InvalidNumTopics</code> …\nSNAFU context selector for the <code>Error::InvalidProtoMsg</code> …\nSNAFU context selector for the <code>Error::InvalidRole</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidStatKey</code> …\nSNAFU context selector for the <code>Error::InvalidTimeZone</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidViewInfo</code> …\nSNAFU context selector for the <code>Error::KafkaGetOffset</code> …\nSNAFU context selector for the <code>Error::KafkaPartitionClient</code> …\nSNAFU context selector for the <code>Error::MetadataCorruption</code> …\nSNAFU context selector for the <code>Error::MismatchPrefix</code> …\nSNAFU context selector for the <code>Error::MoveValues</code> variant\nSNAFU context selector for the <code>Error::MySqlExecution</code> …\nSNAFU context selector for the <code>Error::MySqlTransaction</code> …\nSNAFU context selector for the <code>Error::NextSequence</code> variant\nSNAFU context selector for the <code>Error::NoLeader</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::OperateDatanode</code> …\nSNAFU context selector for the <code>Error::ParseNum</code> variant\nSNAFU context selector for the <code>Error::ParseOption</code> variant\nSNAFU context selector for the <code>Error::ParseProcedureId</code> …\nSNAFU context selector for the <code>Error::ParseWalOptions</code> …\nSNAFU context selector for the <code>Error::PayloadNotExist</code> …\nSNAFU context selector for the <code>Error::PostgresExecution</code> …\nSNAFU context selector for the <code>Error::PostgresTransaction</code> …\nSNAFU context selector for the <code>Error::PrimaryKeyNotFound</code> …\nSNAFU context selector for the <code>Error::ProcedureNotFound</code> …\nSNAFU context selector for the <code>Error::ProcedureOutput</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ProduceRecord</code> variant\nSNAFU context selector for the <code>Error::PutPoison</code> variant\nSNAFU context selector for the <code>Error::QueryProcedure</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ReadFlexbuffers</code> …\nSNAFU context selector for the <code>Error::ReadObject</code> variant\nSNAFU context selector for the <code>Error::RegionOperatingRace</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ResolveKafkaEndpoint</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::RetryLater</code> variant\nSNAFU context selector for the <code>Error::RouteInfoCorrupted</code> …\nSNAFU context selector for the <code>Error::SchemaAlreadyExists</code> …\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SendMessage</code> variant\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SerializeFlexbuffers</code> …\nSNAFU context selector for the <code>Error::SerializeToJson</code> …\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nSNAFU context selector for the <code>Error::SubmitProcedure</code> …\nSNAFU context selector for the <code>Error::TableAlreadyExists</code> …\nSNAFU context selector for the <code>Error::TableInfoNotFound</code> …\nSNAFU context selector for the <code>Error::TableNotFound</code> variant\nSNAFU context selector for the <code>Error::TableRouteNotFound</code> …\nSNAFU context selector for the <code>Error::Table</code> variant\nSNAFU context selector for the <code>Error::TlsConfig</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Unexpected</code> variant\nSNAFU context selector for the <code>Error::Unsupported</code> variant\nSNAFU context selector for the <code>Error::ValueNotExist</code> variant\nSNAFU context selector for the <code>Error::ViewAlreadyExists</code> …\nSNAFU context selector for the <code>Error::ViewNotFound</code> variant\nSNAFU context selector for the <code>Error::WaitProcedure</code> variant\nSNAFU context selector for the <code>Error::WriteObject</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the response exceeds the size limit.\nDetermine whether it is a retry later type through …\nCheck if the error is a serialization error.\nDetermine whether it needs to clean poisons.\nCreates a new Error::RetryLater error from source <code>err</code>.\nThe owned flow name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandleControl\nHeartbeatResponseHandler\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts datanode workloads from the provided optional …\nThe identifier of cache.\nCloses a region.\nThe instruction of downgrading leader region.\nDowngrades a region.\nThe result of downgrade leader region.\nFlushes a single region.\nFlushes a batch of regions.\nFlushes regions.\nInvalidates batch cache.\nOpens a region.\nUpgrades a follower region to leader region.\nUpgrades a region.\nThe reply of UpgradeRegion.\nReturn error if any during the operation.\nReturns error if any.\nIndicates whether the region exists.\nIndicates whether the region exists.\nThe unique identifier for the flow.\nMapping of flow partition to flownode id\nThe timeout of waiting for flush the region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>last_entry_id</code> if available.\nThe <code>last_entry_id</code> of old leader region.\nThe hint for replaying memtable.\nReturns the <code>metadata_last_entry_id</code> if available (Only …\nThe <code>last_entry_id</code> of old leader metadata region (Only used …\nMapping of flow partition to peer information\nReturns true if <code>last_entry_id</code> has been replayed to the …\nThe RegionId.\nThe RegionId.\nThe timeout of waiting for a wal replay.\nThe keys with these prefixes will be loaded into the cache …\nCATALOG_NAME_KEY: {CATALOG_NAME_KEY_PREFIX}/{catalog_name}\nA struct containing a deserialized value(<code>inner</code>) and an …\nThe id of flow.\nThe partition of flow.\nThe key of metadata.\nThe distribution of regions.\nA set of regions with the same role.\nSCHEMA_NAME_KEY: …\nAdd a follower region to the set.\nAdd a leader region to the set.\nCreates metadata for multiple logical tables and return an …\nCreates metadata for table and returns an error if …\nCreates metadata for view and returns an error if …\nDeletes metadata for table <strong>logically</strong>. The caller MUST …\nDeletes metadata tombstone for table <strong>permanently</strong>. The …\nDeserialize behaviors:The <code>inner</code> field will be deserialized …\nDeletes metadata for table <strong>permanently</strong>. The caller MUST …\nDeletes metadata for view <strong>permanently</strong>. The caller MUST …\nFollower regions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a struct containing a deserialized value and an …\nReturns a struct containing a deserialized value and an …\nReturns original <code>bytes</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeader regions.\nCreate a new region role set.\nRenames the table name and returns an error if different …\nRestores metadata for table. The caller MUST ensure it has …\nSchema-level metadata manager.\nSerialize behaviors:The <code>inner</code> field will be ignored.\nSort the regions.\nUpdates the leader status of the RegionRoute.\nUpdates table info and returns an error if different …\nUpdates view info and returns an error if different …\nThe catalog name key, indices all catalog names\nDecoder <code>KeyValue</code> to {catalog}\nCreates <code>CatalogNameKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key mapping {datanode_id} to {table_id}\nRegionInfo For compatible reason, DON’T modify the field …\nBuilds the create datanode table transactions. It only …\nBuilds the delete datanode table transactions. It only …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a transaction to updates the redundant table …\nBuilds the update datanode table transactions. It only …\nDecodes <code>KeyValue</code> to <code>DatanodeTableValue</code>.\nThe table engine, it SHOULD be immutable after created.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe region options.\nThe region storage path, it SHOULD be immutable after …\nThe per-region wal options. Key: region number. Value: the …\nFind the DatanodeTableValues for the given TableId and …\nThe manager of metadata, provides ability to:\nThe key of <code>__flow/</code> scope.\nThe manager of TableFlowKey.\nCreates metadata for flow and returns an error if …\nDeletes metadata for table <strong>permanently</strong>.\nReturns the <code>FlowInfoManager</code>.\nReturns the <code>FlowNameManager</code>.\nReturns the <code>FlowRouteManager</code>.\nonly metasrv have access to itself’s memory backend, so …\nReturns the <code>FlownodeFlowManager</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>FlowMetadataManager</code>.\nReturns a new FlowScoped key.\nReturns the <code>TableFlowManager</code>.\nUpdate metadata for flow and returns an error if old …\nContains the error value\nThe key stores the metadata of the flow.\nThe key of flow metadata.\nThe manager of FlowInfoKey.\nContains the success value\nBuilds a create flow transaction. It is expected that the …\nBuilds a update flow transaction. It is expected that the …\nThe catalog name.\nThe comment.\nThe created time\nThe expr of expire. Duration in seconds as <code>i64</code>.\nReturns the FlowId.\nThe flow name.\nReturns the <code>flownode_id</code>.\nWhich flow nodes this flow is running on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the FlowInfoValue of specified <code>flow_id</code>.\nReturns the FlowInfoValue with original bytes of specified …\nInsert a new flownode id for a partition.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the FlowInfoKey.\nReturns a new FlowInfoManager.\nReturns a FlowInfoKey with the specified <code>flow_id</code>.\nThe options.\nThe query context used when create flow. Although flow …\nThe raw sql.\nThe sink table used by the flow.\nReturns the <code>source_table</code>.\nThe source tables used by the flow.\nThe updated time.\nfor compatibility with older flow name with less strict …\nContains the error value\nThe key of mapping {flow_name} to FlowId.\nThe key of mapping name to FlowId\nThe manager of FlowNameKey.\nThe value of FlowNameKey.\nContains the success value\nBuilds a create flow name transaction. It’s expected …\nBuilds a update flow name transaction. Which doesn’t …\nReturns the catalog.\nReturns true if the <code>flow</code> exists.\nReturns the FlowId\nReturn the <code>flow_name</code>\nReturn all flows’ names and ids\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the FlowNameValue of specified <code>catalog.flow</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the FlowNameKey\nReturns a new FlowNameManager.\nReturns a FlowNameKeyInner.\nReturns a FlowNameValue with specified FlowId.\nReturn <code>name/{catalog}/</code> as prefix\nThe key stores the route info of the flow.\nThe key of flow route metadata.\nThe manager of FlowRouteKey.\nThe route info of flow.\nBuilds a create flow routes transaction.\nBuilds a update flow routes transaction.\nReturns the <code>FlowId</code>\nDecodes <code>KeyValue</code> to (<code>FlowRouteKey</code>,<code>FlowRouteValue</code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new FlowRouteManager.\nReturns a new FlowRouteKey.\nReturns a FlowRouteKeyInner with the specified <code>flow_id</code> and …\nReturns the <code>FlowPartitionId</code>\nReturns the <code>peer</code>.\nThe prefix used to retrieve all FlowRouteKeys with the …\nRetrieves all FlowRouteValues of the specified <code>flow_id</code>.\nThe entire FlowId to Flow Size’s Map is stored directly …\nFlow’s state report, send regularly through heartbeat …\nThe key stores the state size of the flow.\nThe key of flow state.\nThe manager of FlowStateKey. Since state size changes …\nThe value of flow state size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each key, the last execution time of flow in unix …\nFor each key, the last execution time of flow in unix …\nReturns the FlowStateKey.\nFor each key, the bytes of the state in memory\nFor each key, the bytes of the state in memory\nGet the addresses of the flownodes. The result is a map: …\nThe key of mapping FlownodeId to FlowId.\nThe key of mapping FlownodeId to FlowId.\nThe manager of FlownodeFlowKey.\nBuilds a create flownode flow transaction.\nBuilds a update flownode flow transaction.\nWhether given flow exist on this flownode.\nReturns the FlowId.\nDecodes <code>KeyValue</code> to FlownodeFlowKey.\nRetrieves all FlowId and FlowPartitionIds of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new FlownodeFlowKey.\nReturns a FlownodeFlowKey with the specified <code>flownode_id</code>, …\nReturns a new FlownodeFlowManager.\nReturns the [PartitionId].\nThe prefix used to retrieve all FlownodeFlowKeys with the …\nThe key of mapping TableId to FlownodeId and FlowId.\nThe key of mapping TableId to FlownodeId and FlowId.\nThe manager of TableFlowKey.\nBuilds a create table flow transaction.\nBuilds a update table flow transaction.\nReturns the FlowId.\nReturns the FlownodeId.\nRetrieves all TableFlowKeys of the specified <code>table_id</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new TableFlowManager.\nReturns a new TableFlowKey.\nReturns a new TableFlowKey.\nReturns the [PartitionId].\nThe prefix used to retrieve all TableFlowKeys with the …\nReturns the source TableId.\nDecodes <code>KeyValue</code> to TableFlowKey.\nThe maintenance mode manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if maintenance mode is enabled.\nEnables maintenance mode.\nUnsets maintenance mode.\nThe key stores node address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets schema options by table id.\nCreates a new database meta\nContains the error value\nContains the success value\nThe schema name key, indices all schema names belong to …\nCreates <code>SchemaNameKey</code>.\nDeletes a SchemaNameKey.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes <code>KeyValue</code> to {schema}\nReturns a schema stream, it lists all schemas belong to …\nUpdates a SchemaNameKey.\nContains the error value\nContains the success value\nThe key stores the metadata of the table.\nReturns batch of <code>DeserializedValueWithBytes&lt;TableInfoValue&gt;</code>…\nBuilds a create table info transaction, it expected the …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update table info transaction, it expected the …\nChecks if the table exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new TableInfoKey.\nBuilds storage path for all regions in table.\nBuilds a create table name transaction. It only executes …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update table name transaction. It only executes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes <code>KeyValue</code> to ({table_name}, TableNameValue)\nContains the error value\nContains the success value\nThe key stores table routes\nLow-level operations of TableRouteValue.\nReturns the reference of <code>PhysicalTableRouteValue</code>.\nReturns batch of <code>TableRouteValue</code> that respects the order …\nReturns the TableRouteValue::Physical recursively.\nBuilds a create table route transaction, it expected the …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update table route transaction, it expected the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>TableRouteValue</code>.\nReturns the TableId recursively.\nReturns the TableRouteValue::Physical recursively.\nReturns <code>RegionDistribution</code> of the table(<code>table_id</code>).\nReturns the <code>TableRouteValue</code> wrapped with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts to <code>PhysicalTableRouteValue</code>.\nReturns true if it’s TableRouteValue::Physical.\nReturns a TableRouteValue::Physical if <code>table_id</code> equals …\nReturns the corresponding RegionRoute, returns <code>None</code> if it…\nGets the RegionRoutes of this TableRouteValue::Physical.\nReturns low-level APIs.\nReturns a new version TableRouteValue with <code>region_routes</code>.\nReturns the version.\nTombstoneManager provides the ability to:\nMoves value to <code>dest_key</code>.\nCreates tombstones for keys.\nDeletes tombstones values for the specified <code>keys</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMoves values to <code>dest_key</code>.\nReturns TombstoneManager.\nRestores tombstones for keys.\nThe value associated with a topic name key.\nPut topics into kvbackend. The value is set to 0 by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet value for a specific topic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRange query for topics. Only the keys are returned. …\nConvert a key-value pair to a topic name.\nUpdate the topic name key and value in the kv backend.\nUpdate the topics in legacy format to the new format.\nManages map of topics and regions in kvbackend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a mapping of <code>RegionId</code>s to their corresponding …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the list of region ids using specified topic.\nValue is of format <code>{prefix}/{topic}/{region_id}</code>\nThe response set of TxnOpResponse::ResponseGet\nReturns a decoder to decode bytes to …\nReturns a filter to consume a KeyValue where the key …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nThe VIEW logical plan encoded bytes\nThe key stores the metadata of the view.\nThe <code>[ViewInfo]</code> manager\nThe VIEW info value that keeps the metadata.\nGet the <code>[ViewInfoValue]</code> by the view id slice in batch\nReturns batch of <code>DeserializedValueWithBytes&lt;ViewInfoValue&gt;</code>.\nBuilds a create view info transaction, it expected the …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update view info transaction, it expected the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>[ViewInfoValue]</code> by the view id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>[ViewInfoKey]</code>.\nUpcast as <code>KvBackendRef</code>. Since …\nCAS: Compares the value at the key with the given value, …\nReturns previous key-value pair if <code>prev_kv</code> is <code>true</code>.\nCheck if the key exists, not returning the value. If the …\nPuts a value at a key. If <code>if_not_exists</code> is <code>true</code>, the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery executor for rds. It can execute queries or generate …\nFactory for creating default and transaction query …\nA MySQL-backed key-value store. It uses sqlx::Pool as the …\nA PostgreSQL-backed key-value store for metasrv. It uses …\nRds backed store for metsrv\nTransaction query executor for rds. It can execute queries …\nBatch get with certain client. It’s needed for a client …\nBatch get with certain client. It’s needed for a client …\nChecks if the transaction operations are the same type.\nSome queries don’t need to return any result, such as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecute a batch of transaction operations. This function …\nCreate MySqlStore impl of KvBackendRef from sqlx::Pool.\nCreate PgStore impl of KvBackendRef from …\nCreate PgStore impl of KvBackendRef from url.\nCreate MySqlStore impl of KvBackendRef from url.\nA MySQL-backed key-value store. It uses sqlx::Pool as the …\nFactory for building sql templates.\nTemplates for the given table name.\nTemplates for range request.\nType of range template.\nBuilds the template set for the given table name.\nBuilds the parameters for the given range template type. …\nCaution: sqlx will stuck on the query if two transactions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the sql for batch delete.\nGenerates the sql for batch get.\nGenerates the sql for batch upsert. For MySQL, it also …\nGets the template for the given type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate in placeholders for MySQL.\nCreates a new [<code>SqlTemplateFactory</code>] with the given table …\nDetermine the template type for range request.\nAdds limit to the template.\nCreate MySqlStore impl of KvBackendRef from sqlx::Pool.\nCreate MySqlStore impl of KvBackendRef from url.\nFactory for building sql templates.\nTemplates for the given table name.\nA PostgreSQL-backed key-value store for metasrv. It uses …\nTemplates for range request.\nType of range template.\nBuilds the template set for the given table name.\nBuilds the parameters for the given range template type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the sql for batch delete.\nGenerates the sql for batch get.\nGenerates the sql for batch upsert.\nGets the template for the given type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a row to a <code>KeyValue</code>.\nCreates a new [<code>SqlTemplateFactory</code>] with the given table …\nGenerate in placeholders for PostgreSQL.\nDetermine the template type for range request.\nAdds limit to the template.\nCreate PgStore impl of KvBackendRef from …\nCreate PgStore impl of KvBackendRef from url.\nTakes a list of operations. The operations list will be …\nBuilds a transaction that puts a value at a key if the key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of operations permitted in a transaction.\nTakes a list of operations. The operations list will be …\nBuilds a transaction that puts a value at a key if the key …\nNone means the key does not exist.\nTakes a list of comparison. If all comparisons passed in …\nRemoves sensitive information like passwords from …\nA trait for handling leadership change events in a …\nA notifier for leadership change events.\nA trait for customizing the leadership change notifier.\nAdds a listener to the notifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the listener name.\nNotify all listeners that the node has become a leader.\nNotify all listeners that the node has become a follower.\nCalled when the node transitions to the leader role.\nCalled when the node transitions to the follower role.\nCatalogLock acquires the lock on the tenant level.\nFlowLock acquires the lock on the table level.\nFlowNameLock prevents any procedures trying to create a …\nRegionLock acquires the lock on the region level.\nRemoteWalLock acquires the lock on the remote wal topic …\nSchemaLock acquires the lock on the database level.\nTableLock acquires the lock on the table level.\nTableNameLock prevents any procedures trying to create a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache container cache get counter.\nCache container cache miss counter.\nCache container load cache timer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNodeExpiryListener periodically checks all node info in …\nCleans expired nodes from memory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLists expired nodes that have been inactive more than …\nThe trait for handling requests to datanode.\nThe trait for handling requests to flownode\nDatanode manager\nRetrieves a target <code>datanode</code>.\nRetrieves a target <code>flownode</code>.\nHandles DML, and DDL requests.\nHandles query requests\ncan query peer given a node id\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the poison key for the table.\nThe Range Request’s default page size.\nIt reduces the page size if the response size exceeds the …\nDecreases the <code>page size</code> if the response message size …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkey is the first key for the range, If range_end is not …\nkeys_only when set returns only the keys and not the …\nReturns a new PaginationStream.\nrange_end is the upper bound on the requested range [key, …\nTracks regions in memory.\nTracks the operating(i.e., creating, opening, dropping) …\nReturns true if the keeper contains a (<code>datanoe_id</code>, …\nExtracts all operating regions from <code>region_ids</code> and returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns opening region info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s empty.\nReturns number of element in tracking set.\nReturns OperatingRegionGuard if Region(<code>region_id</code>) on Peer(…\nRepresents information about a leader region in the …\nRegistry that maintains a mapping of all leader regions in …\nGets the leader region for the given region ids.\nPuts the leader regions into the registry.\nReturns the flushed entry id of the leader region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a LeaderRegionManifestInfo from RegionStat.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the manifest version of the leader region.\nCreates a new empty leader region registry.\nReturns prunable entry id of the leader region. It is used …\nResets the registry to an empty state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate flow\nA <code>CREATE VIEW</code> task.\nDDL tasks\nDrop flow\nA <code>DROP VIEW</code> task.\nReturns the view’s columns\nDuration in seconds. Data older than this duration will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>DdlTask</code> to alter a database.\nCreates a <code>DdlTask</code> to alter several logical tables.\nCreates a <code>DdlTask</code> to alter a table.\nCreates a <code>DdlTask</code> to create a database.\nCreates a <code>DdlTask</code> to create a flow.\nCreates a <code>DdlTask</code> to create several logical tables.\nCreates a <code>DdlTask</code> to create a table.\nCreates a <code>DdlTask</code> to create a view.\nCreates a <code>DdlTask</code> to drop a database.\nCreates a <code>DdlTask</code> to drop a flow.\nCreates a <code>DdlTask</code> to drop a table.\nCreates a <code>DdlTask</code> to drop a view.\nCreates a <code>DdlTask</code> to truncate a table.\nReturns the original logical plan’s columns\nReturns the encoded logical plan\nSets the <code>table_info</code>’s table_id.\nSort the columns in CreateTableExpr and RawTableInfo.\nReturns the resolved table names in view’s logical plan\nReturns the <code>TableReference</code> of view.\nReturns the <code>TableReference</code> of view.\nReturns the view definition in SQL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA request to add region follower.\nA request to migrate region.\nA request to remove region follower.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCast the protobuf <code>ProcedureId</code> to common <code>ProcedureId</code>.\nThe peer id to add follower.\nThe peer id to remove follower.\nCast the common <code>ProcedureId</code> to protobuf <code>ProcedureId</code>.\nCast the common <code>ProcedureState</code> to pb <code>ProcedureStateResponse</code>…\nCast the <code>ProcedureState</code> to protobuf <code>PbProcedureStatus</code>.\nThe region id to add follower.\nThe region id to remove follower.\nSets <code>status</code> to the provided enum value.\nReturns the enum value of <code>status</code>, or the default if the …\nThe following cases in which the <code>Region</code> will be downgraded.\nThe State of the <code>Region</code> Leader. TODO(dennis): It’s …\nBuilder for <code>RegionRoute</code>.\nError type for RegionRouteBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>RegionRoute</code>.\nReturns the HashMap&lt;RegionNumber, &amp;Peer&gt;;\nCreate an empty builder, with all fields set to <code>None</code> or …\nMarks the Leader <code>Region</code> as [<code>RegionState::Downgrading</code>].\nReturns the region numbers of the follower regions on the …\nReturns the followers of the table.\nReturns the region numbers of the leader regions on the …\nReturns the leader peers of the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the Leader <code>Region</code> is downgraded.\nReturns how long since the leader is in <code>Downgraded</code> state.\nThe start time when the leader is in <code>Downgraded</code> state.\nThe start time when the leader is in <code>Downgraded</code> state.\nThe start time when the leader is in <code>Downgraded</code> state.\n<code>None</code> by default.\n<code>None</code> by default.\n<code>None</code> by default.\nReturns the operating leader regions with corresponding …\nReturns the distribution of regions to datanodes.\nSets the leader state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkey is the first key for the range, If range_end is not …\nkey is the key, in bytes, to put into the key-value store.\nkey is the key, in bytes, to put into the key-value store.\nkey is the first key to delete in the range.\nkeys_only when set returns only the keys and not the …\nlimit is a limit on the number of keys returned for the …\nCreates a new <code>DeleteRangeResponse</code> with the given deleted …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pairs …\nIf prev_kv is set, gets the previous key-value pairs …\nIf prev_kv is set, gets the previous key-value pairs …\nReturns the <code>RangeBounds</code>.\nReturns the <code>RangeBounds</code>.\nrange_end is the upper bound on the requested range [key, …\nrange_end is the key following the last key to delete for …\nvalue is the value, in bytes, to associate with the key in …\nvalue is the value, in bytes, to associate with the key in …\nexpect is the previous value, in bytes\nkey is the first key for the range, If range_end is not …\nkey is the key, in bytes, to put into the key-value store.\nkey is the key, in bytes, to put into the key-value store.\nkey is the first key to delete in the range. If range_end …\nSets <code>keys</code>.\nkeys_only when set returns only the keys and not the …\nlimit is a limit on the number of keys returned for the …\nGets all keys prefixed with key. range_end is the key plus …\nDeletes all keys prefixed with key. range_end is one bit …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pairs …\nCreates a new <code>DeleteRangeResponse</code> with the given deleted …\nkey is the first key for the range, If range_end is not …\nkey is the first key to delete in the range.\nvalue is the value, in bytes, to associate with the key in …\nvalue is the value, in bytes, to associate with the key in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the <code>next</code> value directly if it is in the <code>range</code> …\nThe format of the backup file.\nThe maximum size of the request to put metadata, use 1MiB …\nThe manager of the metadata snapshot.\nDumps the metadata to the backup file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRestores the metadata from the backup file to the metadata …\nThe content of the backup file.\nThe layout of the backup file.\nThe key-value pair of the backup file.\nThe metadata of the backup file.\nThe content of the backup file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes the <code>Document</code> from a bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the key-value pairs.\nConverts the <code>Document</code> to a <code>MetadataContent</code>.\nCreates a new document.\nCreate a new metadata.\nCreate a new metadata content.\nConverts the <code>Document</code> to a bytes.\nContains the error value\nContains the success value\nThe value of the poison key.\nBuilds a create poison transaction, it expected the …\nBuilds a delete poison transaction, it expected the …\nDeletes the poison.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPut the poison.\nSets the <code>max_value_size</code>. <code>None</code> stands for no limit.\nA mock struct implements NodeManager only implement the …\nA mock struct implements NodeManager only implement the …\nA mock struct implements Datanode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a test purpose DdlContext.\nReturns a test purpose DdlContext with a specified …\nCreate a kafka topic pool for testing.\nGet next prefix key of <code>key</code>.\nGet prefix end key of <code>key</code>.\nAllocates wal options in region granularity.\nArc wrapper of WalOptionsAllocator.\nAllocates a batch of wal options where each wal options …\nAllocates a wal options for each region. The allocated wal …\nBuilds a kafka Client.\nBuilds a KafkaTopicCreator.\nBuilds a wal options allocator based on the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if it’s the remote WAL.\nInserts wal options into options.\nTries to start the allocator.\nA topic selector with the round-robin strategy, i.e. …\nControls topic selection.\nArc wrapper of TopicSelector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSelects a topic from the topic pool.\nCreates topics in kafka.\nAppends a noop record to the topic. It only appends a noop …\nBuilds a kafka Client.\nBuilds a KafkaTopicCreator.\nThe timeout of topic creation in milliseconds.\nCreates topics in Kafka.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of partitions per topic.\nCreates a PartitionClient for the given topic.\nPrepares topics in Kafka.\nThe replication factor of each topic.\nManages topics in kvbackend. Responsible for:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPersists prepared topics into the key-value backend.\nReturns the topics that are not prepared.\nTopic pool for kafka remote wal. Responsible for:\nTries to activate the topic manager when metasrv becomes …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSelects one topic from the topic pool through the topic …\nSelects a batch of topics from the topic pool through the …")