searchState.loadedDescShard("cmd", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog the versions of the application, and the arguments …\nA hook for implementor to make something happened before …\nwait for the close signal, for unix platform it’s SIGINT …\nWaits the quit signal by default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe options of each component (like Datanode or …\nallow customizing datanode for downstream projects\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe plugin options.\nThe address to bind the gRPC server.\nThe address advertised to the metasrv, and used for …\nThe runtime options.\nBuilder for Datanode instance.\nTry to build the Datanode instance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the mutable builder for Datanode, in case you want to …\nTry to create a new InstanceBuilder, and do some …\nSNAFU context selector for the <code>Error::BuildCacheRegistry</code> …\nSNAFU context selector for the <code>Error::BuildCli</code> variant\nSNAFU context selector for the <code>Error::BuildMetaServer</code> …\nSNAFU context selector for the <code>Error::BuildRuntime</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::CacheRequired</code> variant\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the <code>Error::CreateDir</code> variant\nSNAFU context selector for the <code>Error::EmptyResult</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FileIo</code> variant\nSNAFU context selector for the <code>Error::HttpQuerySql</code> variant\nSNAFU context selector for the <code>Error::IllegalConfig</code> variant\nSNAFU context selector for the <code>Error::InitDdlManager</code> …\nSNAFU context selector for the <code>Error::InitMetadata</code> variant\nSNAFU context selector for the <code>Error::InitTimezone</code> variant\nSNAFU context selector for the <code>Error::InitTlsProvider</code> …\nSNAFU context selector for the <code>Error::LoadLayeredConfig</code> …\nSNAFU context selector for the <code>Error::MetaClientInit</code> …\nSNAFU context selector for the <code>Error::MissingConfig</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::Other</code> variant\nSNAFU context selector for the <code>Error::ParseSql</code> variant\nSNAFU context selector for the <code>Error::PlanStatement</code> variant\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::Servers</code> variant\nSNAFU context selector for the <code>Error::ShutdownDatanode</code> …\nSNAFU context selector for the <code>Error::ShutdownFlownode</code> …\nSNAFU context selector for the <code>Error::ShutdownFrontend</code> …\nSNAFU context selector for the <code>Error::ShutdownMetaServer</code> …\nSNAFU context selector for the <code>Error::SpawnThread</code> variant\nSNAFU context selector for the <code>Error::StartCli</code> variant\nSNAFU context selector for the <code>Error::StartDatanode</code> variant\nSNAFU context selector for the <code>Error::StartFlownode</code> variant\nSNAFU context selector for the <code>Error::StartFrontend</code> variant\nSNAFU context selector for the <code>Error::StartMetaServer</code> …\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe options of each component (like Datanode or …\nThe configuration file for flownode\nThe prefix of environment variables, default is …\nallow customizing flownode for downstream projects\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHTTP request timeout in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetasrv address list;\nFlownode’s id\nThe plugin options.\nBind address for the gRPC server.\nThe address advertised to the metasrv, and used for …\nThe runtime options.\nUser Provider cfg, for auth, currently only support static …\nThe options of each component (like Datanode or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe plugin options.\nThe address to bind the gRPC server.\nThe address advertised to the metasrv, and used for …\nThe runtime options.\nThe database backend.\nThe options of each component (like Datanode or …\nThe working home directory of this metasrv instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe max operations per txn\nThe plugin options.\nThe address to bind the gRPC server.\nThe communication server address for the frontend and …\nThe runtime options.\nIf it’s not empty, the metasrv will store all data with …\nAll the options of GreptimeDB.\nThe options of each component (like Datanode or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe plugin options.\nThe runtime options.\nBuild GreptimeDB instance with the loaded options.\nThe working home directory of this standalone instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the GreptimeDB options from various sources (command …\nOptions for different store engines.\nFind the socket addr of a server by its <code>name</code>.\nSet the flow streaming engine for the standalone instance.")