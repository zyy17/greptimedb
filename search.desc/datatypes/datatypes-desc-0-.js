searchState.loadedDescShard("datatypes", 0, "Computation kernels on Arrow Arrays\nApply the macro rules to all primitive types.\nSome helper macros for datatypes, copied from databend.\nMatch the logical type and apply <code>$body</code> to all primitive …\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nA trait for Arrow String Arrays, currently three types are …\nOptions that define how <code>take</code> should behave\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nSet this sort options to sort in ascending order\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nConstruct the final <code>FilterPredicate</code>\nReturns a prepared function optimized to filter multiple …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nlexicographically compare values at the wrapped columns …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nPerform SQL <code>CONTAINS(left, right)</code>\nNumber of rows being selected based on this <code>FilterPredicate</code>\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nSet this sort options to sort in descending order\nWhether to sort in descending order\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nPerform SQL <code>ENDSWITH(left, right)</code>\nReturns a filtered <code>values</code> Array where the corresponding …\nSelects rows from <code>values</code> based on this <code>FilterPredicate</code>\nReturns a filtered RecordBatch where the corresponding …\nFormatting options when casting from temporal types to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if all data within this string array is ASCII\nReturns true if this contains no partitions\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nConstructs a new iterator\nComputation kernels on Arrow Arrays\nReturns the number of partitions\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nPerform SQL <code>left LIKE right</code>\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nCreates a new iterator from a BooleanArray\nCreate a new <code>FilterBuilder</code> that can be used to construct a …\nCreate a new <code>SortOptions</code> struct\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nReturns a new array with the same values and the validity …\nSet this sort options to sort nulls first\nWhether to sort nulls first\nSet this sort options to sort nulls last\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nCompute an optimised representation of the provided <code>filter</code> …\nSort options for this column\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nIt’s unstable_sort, may not preserve the order of equal …\nGiven a list of lexicographically sorted columns, computes …\nRemove null values by do a bitmask AND operation with null …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nReturns the range of each partition\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nhow to handle cast failures, either return NULL …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nShifts array by defined number of items (to left or right) …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nPerform SQL <code>STARTSWITH(left, right)</code>\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nCreate a new lex comparator that will wrap the given sort …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nReturns the value of the target field when selected, or …\nThe column to sort\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nSet this sort options to sort descending if argument is …\nSet this sort options to sort nulls first if argument is …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nCast kernels to convert <code>ArrayRef</code>  between supported …\nCast <code>array</code> to the provided data type and return a new …\n<code>Parser</code> implementations for converting strings to Arrow …\nComparison kernels for <code>Array</code>s.\nComparison kernels for <code>Array</code>s.\nDefines concat kernel for <code>ArrayRef</code>\nProvides utility functions for concatenation of elements …\nDefines filter kernels\nInterleave elements from multiple arrays\nDefines kernel for length of string arrays and binary …\nImplements the <code>nullif</code> function for Arrow arrays.\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines partition kernel for <code>ArrayRef</code>\nProvides <code>rank</code> function to assign a rank to each value in …\nDefines kernel to extract substrings based on a regular …\nDefines sort kernel for <code>ArrayRef</code>\nDefines kernel to extract a substring of an Array …\nDefines take kernel for Array\nDefines temporal kernels for time and date related …\nDefines union_extract kernel for UnionArray\nDefines windowing functions, like <code>shift</code>ing\n<code>zip</code>: Combine values from two arrays based on boolean mask\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nFormatting options when casting from temporal types to …\nhow to handle cast failures, either return NULL …\nA Century\nA Day\nA Decade\nAn Hour\nConfig to parse interval strings\nRepresents the units of an interval, with each variant …\nA Microsecond\nA Millisecond\nA Minute\nA Month\nA tuple representing (months, days, nanoseconds) in an …\nA Nanosecond\nSpecialized parsing implementations to convert strings to …\nA Second\nA Week\nA Year\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new IntervalParseConfig with the given default …\nParse a string to the native type\nParse the string format decimal value to i128/i256 format …\nParse a string to the native type with a format string\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCompares two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nComparing two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nPerform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>\nPerform <code>left == right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left != right</code> operation on two <code>Datum</code>.\nPerform <code>left IS NOT DISTINCT FROM right</code> operation on two …\nA trait for Arrow String Arrays, currently three types are …\nPerform SQL <code>CONTAINS(left, right)</code>\nPerform SQL <code>ENDSWITH(left, right)</code>\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nReturns true if all data within this string array is ASCII\nConstructs a new iterator\nPerform SQL <code>left LIKE right</code>\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>STARTSWITH(left, right)</code>\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of a <code>GenericByteArray</code>…\nReturns the elementwise concatenation of <code>Array</code>s.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of <code>StringArray</code>.\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nReturns a prepared function optimized to filter multiple …\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nRemove null values by do a bitmask AND operation with null …\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nReturns an array of Int32/Int64 denoting the number of …\nReturns an array of Int32/Int64 denoting the length of …\nReturns a new array with the same values and the validity …\nPerform <code>lhs + rhs</code>, returning an error on overflow\nPerform <code>lhs + rhs</code>, wrapping on overflow for …\nPerform <code>lhs / rhs</code>\nPerform <code>lhs * rhs</code>, returning an error on overflow\nPerform <code>lhs * rhs</code>, wrapping on overflow for …\nNegates each element of  <code>array</code>, returning an error on …\nNegates each element of  <code>array</code>, wrapping on overflow for …\nPerform <code>lhs % rhs</code>\nPerform <code>lhs - rhs</code>, returning an error on overflow\nPerform <code>lhs - rhs</code>, wrapping on overflow for …\nA computed set of partitions, see <code>partition</code>\nGiven a list of lexicographically sorted columns, computes …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nA lexicographical comparator that wraps given array data …\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nWhether to sort in descending order\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nWhether to sort nulls first\nSort options for this column\nIt’s unstable_sort, may not preserve the order of equal …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nThe column to sort\nReturns an <code>ArrayRef</code> with substrings of all the elements in …\nSubstrings based on character index\nOptions that define how <code>take</code> should behave\nPerform bounds check before taking indices from values. If …\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nHour of the day, in range <code>0..=23</code>\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nReturns the value of the target field when selected, or …\nShifts array by defined number of items (to left or right) …\nZip two arrays by some boolean mask.\nData type abstraction.\nConvert this type as arrow::datatypes::DataType.\nConvert this type as arrow::datatypes::DataType.\nTry to cast data type as a <code>DurationType</code>.\nTry to cast the type as a <code>ListType</code>.\nTry to cast data type as a <code>TimeType</code>.\nTry to cast data type as a <code>TimestampType</code>.\nChecks if the data type can cast to another data type.\nCreates a mutable vector with given <code>capacity</code> of this type.\nCreates a mutable vector with given <code>capacity</code> of this type.\nReturns the default value of this type.\nReturns the default value of this type.\nCreates a [Duration(DurationMicrosecondType)] datatype.\nCreates a [Duration(DurationMillisecondType)] datatype.\nCreates a [Duration(DurationNanosecondType)] datatype.\nCreates a [Duration(DurationSecondType)] datatype.\nReturns the argument unchanged.\nConverts from arrow timestamp unit to\nConvert arrow data type to ConcreteDataType.\nCreates a [Interval(IntervalDayTimeType)] datatype.\nCreates a [Interval(IntervalMonthDayNanoType)] datatype.\nCreates a [Interval(IntervalYearMonthType)] datatype.\nCalls <code>U::from(self)</code>.\nReturns id of the Logical data type.\nReturns id of the Logical data type.\nName of this data type.\nName of this data type.\nTry to get numeric precision, returns <code>None</code> if it’s not …\nTry to get numeric scale, returns <code>None</code> if it’s float or …\nReturn the datatype name in postgres type system\nReturns the time data type with <code>TimeUnit</code>.\nCreates a [Time(TimeMicrosecond)] datatype.\nCreates a [Time(TimeMillisecondType)] datatype.\nCreates a [Time(TimeNanosecond)] datatype.\nCreates a [Time(TimeSecondType)] datatype.\nCasts the value to specific DataType. Return None if cast …\nCasts the value to specific DataType. Return None if cast …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSNAFU context selector for the <code>Error::ArrowCompute</code> variant\nSNAFU context selector for the <code>Error::BadArrayAccess</code> …\nSNAFU context selector for the <code>Error::CastTimeType</code> variant\nSNAFU context selector for the <code>Error::CastType</code> variant\nSNAFU context selector for the <code>Error::Conversion</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::DefaultValueType</code> …\nSNAFU context selector for the <code>Error::Deserialize</code> variant\nSNAFU context selector for the <code>Error::DuplicateColumn</code> …\nSNAFU context selector for the <code>Error::DuplicateMeta</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::InvalidFulltextOption</code>…\nSNAFU context selector for the <code>Error::InvalidJson</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidTimestampIndex</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidVector</code> variant\nSNAFU context selector for the <code>Error::NullDefault</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::ParseExtendedType</code> …\nSNAFU context selector for the <code>Error::ParseSchemaVersion</code> …\nSNAFU context selector for the <code>Error::ProjectArrowSchema</code> …\nSNAFU context selector for the <code>Error::Serialize</code> variant\nSNAFU context selector for the <code>Error::ToScalarValue</code> variant\nSNAFU context selector for the <code>Error::TryFromValue</code> variant\nSNAFU context selector for the <code>Error::UnknownVector</code> variant\nSNAFU context selector for the <code>Error::UnsupportedArrowType</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::UnsupportedOperation</code> …\nSNAFU context selector for the <code>Error::ValueExceedsPrecision</code>…\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder type to build this vector.\nIterator type of this vector.\nThe reference item of this vector.\nOwned scalar value e.g. primitive types, bool, <code>Vec&lt;u8&gt;</code> …\nThe corresponding <code>Scalar</code> type.\nA sub trait of Vector to add scalar operation support.\nA trait over all vector builders.\nGet a reference of the current value.\nBuild a new vector and reset <code>self</code>.\nBuild a new vector without resetting <code>self</code>.\nReturns the reference to an element at given position.\nReturns iterator of current vector.\nPush a value into the builder.\nConvert the reference into an owned value.\nUpcast GAT type’s lifetime.\nCreate a new builder with initial <code>capacity</code>.\nKeys used in fulltext options\nKeys used in SKIPPING index options\nSchema of a column, used as an immutable struct.\nKey used to store fulltext options in arrow field’s …\nFulltext analyzer.\nThe backend of the fulltext index.\nFulltext options for a column.\nInitial version of the schema.\nKey used to store whether the column has inverted index in …\nStruct used to serialize and deserialize <code>Schema</code>.\nKey used to store skip options in arrow field’s metadata.\nA common schema, should be immutable.\nSkipping options for a column.\nSkip index types.\nKey used to store whether the column is time index in …\nKey used to store actual column type in field metadata.\nKey used to store version number of the schema in metadata.\nAdd key value pair to metadata.\nThe fulltext analyzer to use.\nThe fulltext backend to use.\nWhether the fulltext index is case-sensitive.\nRetrieve the column’s name by index\nSchema of columns.\nWhether the fulltext index is enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe granularity of the skip index.\nThe type of the skip index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a schema from a vector of ColumnSchema.\nReturns index of the timestamp key column.\nIndex of the timestamp column.\nIndex of the timestamp key column.\nTry to Create a schema from a vector of ColumnSchema.\nGenerate a new projected schema\nSchema version.\nVersion of the schema.\nKeys used in fulltext options\nKeys used in SKIPPING index options\nColumn extended type set in column schema’s metadata.\nSchema of a column, used as an immutable struct.\nKey used to store default constraint in arrow field’s …\nKey used to store fulltext options in arrow field’s …\nFulltext analyzer.\nThe backend of the fulltext index.\nFulltext options for a column.\nKey used to store whether the column has inverted index in …\nJson type.\nKey used to store skip options in arrow field’s metadata.\nSkipping options for a column.\nSkip index types.\nKey used to store whether the column is time index in …\nVector type with dimension.\nThe fulltext analyzer to use.\nThe fulltext backend to use.\nWhether the fulltext index is case-sensitive.\nRetrieve the column comment\nCreates a default value for this column.\nCreates a vector with default value for this column.\nCreates a vector for padding.\nCreates an impure default value for this column, only if …\nWhether the fulltext index is enabled.\nReturns the argument unchanged.\nRetrieves the fulltext options for the column.\nThe granularity of the skip index.\nThe type of the skip index.\nCalls <code>U::from(self)</code>.\nCheck if the default constraint is a impure function.\nSet the inverted index for the column. Similar to …\nSet the nullability to <code>true</code> of the column. Similar to …\nSet the <code>is_time_index</code> to <code>true</code> of the column. Similar to …\nRetrieves the skipping index options for the column.\nSet default constraint.\nSet the inverted index for the column. Similar to …\nCreates a new <code>ColumnSchema</code> with given metadata.\nSet the nullablity to <code>true</code> of the column. Similar to …\nColumn’s default constraint.\nCast default value to given type\nCreate a default value for given <code>data_type</code>.\nCreate a vector that contains <code>num_rows</code> default values for …\nOnly create default value if it’s impure, i.e., it’s a …\nOnly create default vector if it’s impure, i.e., it’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if this constraint is a function.\nReturns true if this constraint might creates NULL.\nReturns a default null constraint.\nCheck whether the constraint is valid for columns with …\nStruct used to serialize and deserialize <code>Schema</code>.\nSchema of columns.\nCreates a new RawSchema from specific <code>column_schemas</code>.\nIndex of the timestamp column.\nSchema version.\nSerialize a column of value with given type to JSON value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDate representing the elapsed time since UNIX epoch …\nA 64-bit duration representing the elapsed time in either …\nA 64-bit interval representing the elapsed time in days …\nA 128-bit interval representing the elapsed time in …\nA 32-bit interval representing the elapsed time in months.\nUnique identifier for logical data type.\nA 64-bit time representing the elapsed time since midnight …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArrow primitive type of this logical type.\nData type for Date (YYYY-MM-DD).\nDecimal type with precision and scale information.\nUsed to represent the Dictionary datatype.\nThe “calendar” interval is a type of time interval …\nJsonType is a data type for JSON data. It is stored as …\nLargest type this primitive type can cast to.\nUsed to represent the List datatype.\nTrait bridging the logical primitive type with …\nLogical primitive type that this wrapper type belongs to.\nThe underlying native type.\nNative (physical) type of this logical type.\nA new type for WrapperType, complement the <code>Ord</code> feature for …\n<code>VectorType</code> is a data type for vector data with a fixed …\nWrapper type that the vector returns.\nRepresents the wrapper type that wraps a native type using …\nConvert this type as arrow::datatypes::DataType.\nConvert this type as arrow::datatypes::DataType.\nConvert this type as arrow::datatypes::DataType.\nConvert this type as arrow::datatypes::DataType.\nConstruct the data type struct.\nCast value ref to the primitive type.\nDynamic cast the vector to the concrete vector type.\nCreates a mutable vector with given <code>capacity</code> of this type.\nCreates a mutable vector with given <code>capacity</code> of this type.\nCreates a mutable vector with given <code>capacity</code> of this type.\nCreates a mutable vector with given <code>capacity</code> of this type.\nReturns the default value of this type.\nReturns the default value of this type.\nReturns the default value of this type.\nReturns the default value of this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert native type into this wrapper type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this wrapper type into native type.\nThe type of List’s item.\nConverts a json type value to string\nThe type of Dictionary key.\nReturns id of the Logical data type.\nReturns id of the Logical data type.\nReturns id of the Logical data type.\nReturns id of the Logical data type.\nName of this data type.\nName of this data type.\nName of this data type.\nName of this data type.\nParses a string to a json type value\nParses a string to a vector type value Valid input format: …\nTimeType represents the elapsed time since midnight in the …\nCasts the value to specific DataType. Return None if cast …\nCasts the value to specific DataType. Return None if cast …\nCasts the value to specific DataType. Return None if cast …\nCasts the value to specific DataType. Return None if cast …\nConvert fractional timestamp precision to timestamp types. …\nReturn the name of the type.\nThe type of Dictionary value.\nConverts a vector type value to string for example: [1.0, …\nCast options for cast functions.\nReturn true if the src_value can be casted to dest_type, …\nUsed to cast the value to dest ConcreteDataType …\nCast the value to dest_type with CastOption.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ndecide how to handle cast failures, either return NULL …\nData type for Date (YYYY-MM-DD).\nDecimal type with precision and scale information.\nUsed to represent the Dictionary datatype.\nReturns the key data type.\nThe type of Dictionary key.\nCreate a new <code>DictionaryType</code> whose item’s data type is …\nReturns the value data type.\nThe type of Dictionary value.\nCreates time type from <code>TimeUnit</code>.\nReturns the <code>TimeUnit</code> of this type.\nThe “calendar” interval is a type of time interval …\nReturns the unit of the interval.\nJsonType is a data type for JSON data. It is stored as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a json type value to string\nParses a string to a json type value\nUsed to represent the List datatype.\nReturns the item data type.\nThe type of List’s item.\nCreate a new <code>ListType</code> whose item’s data type is <code>item_type</code>…\nArrow primitive type of this logical type.\nLargest type this primitive type can cast to.\nTrait bridging the logical primitive type with …\nLogical primitive type that this wrapper type belongs to.\nThe underlying native type.\nNative (physical) type of this logical type.\nA new type for WrapperType, complement the <code>Ord</code> feature for …\nWrapper type that the vector returns.\nRepresents the wrapper type that wraps a native type using …\nConstruct the data type struct.\nCast value ref to the primitive type.\nDynamic cast the vector to the concrete vector type.\nConvert native type into this wrapper type.\nConvert this wrapper type into native type.\nReturn the name of the type.\nCreates time type from <code>TimeUnit</code>.\nReturns the time type’s precision.\nReturns the time type’s <code>TimeUnit</code>.\nReturns the <code>TimeUnit</code> of this type.\n<code>VectorType</code> is a data type for vector data with a fixed …\nParses a string to a vector type value Valid input format: …\nConverts a vector type value to string for example: [1.0, …\nDictionary value.\nList value.\nReference to a ListValue.\nA wrapper around floats providing implementations of <code>Eq</code>, …\nValue holds a single arbitrary value of any DataType.\nReference to Value.\nCast itself to binary slice.\nCast itself to boolean.\nCast Value to Date. Return None if value is not a valid …\nCast itself to Date.\nCast itself to Decimal128.\nCast Value to f64. Return None if it’s not castable;\nCast Value to i64. Return None if value is not a valid …\nCast Value to IntervalDayTime. Return None if value is not …\nCast itself to IntervalDayTime.\nCast Value to IntervalMonthDayNano. Return None if value …\nCast itself to IntervalMonthDayNano.\nCast Value to IntervalYearMonth. Return None if value is …\nCast itself to IntervalYearMonth.\nCast itself to ListValue.\nCast itself to ListValueRef.\nCast Value to utf8 String. Return None if value is not a …\nCast itself to string slice.\nCast Value to Time. Return None if value is not a valid …\nCast itself to Time.\nCast Value to timestamp. Return None if value is not a …\nCast itself to Timestamp.\nCast Value to u64. Return None if value is not a valid …\nCast itself to ValueRef.\nReturns the size of the underlying data in bytes, The size …\nReturns data type of the value.\nReturns data type of the value.\nReturns the inner element’s data type.\nInner values datatype, to distinguish empty lists of …\nCast the 64-bit duration into the arrow ScalarValue with …\nuse ‘the first item size’ * ‘length of items’ to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a &amp;str to <code>OrderedFloat</code>. Returns an error if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value out.\nReturns true if this is a null value.\nReturns true if this is null.\nInner values datatypes\nReturns the logical type of the value.\nReturns the maximum number of digits a nonnegative …\nReturns the maximum number of digits a negative …\nConvert <code>ScalarValue</code> to <code>Timestamp</code>. If it’s …\nCast the 64-bit elapsed time into the arrow ScalarValue by …\nConvert self to Value. This method would clone the …\ntransform a ValueRef to a serde_json::Value. The json type …\nApply <code>-</code> unary op if possible\nConvert the value into <code>ScalarValue</code> according to the …\nVector of binary strings.\nVector of boolean.\nDecimal128Vector is a vector keep i128 values with …\nVector of dictionaries, basically backed by Arrow’s …\nHelper functions for <code>Vector</code>.\nVector of Lists, basically backed by Arrow’s <code>ListArray</code>.\nListVector builder.\nMutable vector that could be used to build an immutable …\nA vector where all elements are nulls.\nVector for primitive data types.\nBuilder to build a primitive vector.\nVector of strings.\nValidity of a vector.\nVector of data values.\nReturns the vector as Any so that it can be downcast to a …\nConvert to Any, to enable dynamic casting.\nConvert to mutable Any, to enable dynamic casting.\nReturns the data type of the vector.\nReturns the data type of the vector.\nExtend this mutable vector by slice of <code>vector</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the clone of value at <code>index</code>.\nReturns the reference of value at <code>index</code>.\nVector helper functions, inspired by databend Series mod\nHelper to define …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when it’s a ConstantColumn\nReturns whether the vector is empty.\nReturns whether the vector is empty.\nReturns whether row is null.\nThe datatype of the items in the dictionary.\nThe datatype of the items in the list.\nThe vector of items in the dictionary.\nReturns number of elements in the vector.\nReturns the length of the vector.\nReturns the memory size of vector.\nThe number of null slots on this <code>Vector</code>.\nIf the vector only contains NULL.\nPush null to this mutable vector.\nPush nulls to this mutable vector.\nPush value ref to this mutable vector.\nSlices the <code>Vector</code>, returning a new <code>VectorRef</code>.\nConvert this vector to a new arrow ArrayRef.\nConvert this vector to a new boxed arrow Array.\nConvert <code>self</code> to an (immutable) VectorRef and reset <code>self</code>.\nConvert <code>self</code> to an (immutable) VectorRef and without …\nReturns the clone of value at <code>index</code> or error if <code>index</code> is …\nTry to push value ref to this mutable vector.\nReturns the validity of the Array.\nVector of binary strings.\nCreates a new binary vector of JSONB from a binary vector. …\nVector of boolean.\nGet the inner boolean array.\nReturns the constant value.\nCreate a new ConstantVector.\nDecimal128Vector is a vector keep i128 values with …\nReturn decimal128 vector inner array\nReturns the argument unchanged.\nConstruct Vector from i128 values slice\nConstruct Vector from i128 values\nConstruct Vector from Wrapper(Decimal128) values slice\nGet decimal128 Value from array by index.\nGet decimal128 value from vector by offset and length.\nCalls <code>U::from(self)</code>.\nNew a Decimal128Vector from Arrow Decimal128Array\nValues that exceed the precision bounds will be casted to …\nReturn decimal128 vector precision\nReturn decimal128 vector scale\nValidate decimal precision, if precision is invalid, …\nReturn decimal value as string\nChange the precision and scale of the …\nReturns a Decimal vector with the same data as self, with …\nReturns a Decimal vector with the same data as self, with …\nVector of dictionaries, basically backed by Arrow’s …\nReturns the underlying Arrow dictionary array\nThe datatype of the items in the dictionary.\nThe vector of items in the dictionary.\nReturns the keys array of this dictionary\nCreate a new instance of <code>DictionaryVector</code> from a …\nReturns the values array of this dictionary\nHelper functions for <code>Vector</code>.\nPerform SQL like operation on <code>names</code> and a scalar <code>s</code>.\nGet a pointer to the underlying data of this vectors. Can …\nTry to cast an vec of values into vector, fail if type is …\nTry to cast an arrow scalar value into vector\nTry to cast an arrow array into vector\nTry to cast slice of <code>arrays</code> to vectors.\nVector of Lists, basically backed by Arrow’s <code>ListArray</code>.\nListVector builder.\nBuilder for creating the null bit buffer. This builder …\nAppends a boolean value into the builder.\nAppends a <code>true</code> into the builder to indicate that this item …\nAppends a <code>false</code> into the builder to indicate that this …\nBuilds the null buffer and resets the builder. Returns <code>None</code>…\nBuilds the NullBuffer without resetting the builder.\nFinish the current variable-length list vector slot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe datatype of the items in the list.\nStore the length of the buffer before materializing.\nCreates a new empty builder. <code>capacity</code> is the number of …\nIterate elements as VectorRef.\nCreates a new <code>ListVectorBuilder</code>. <code>item_type</code> is the data …\nA vector where all elements are nulls.\nCreate a new <code>NullVector</code> with <code>n</code> elements.\nVector compute operations.\nCast vector to the provided data type and return a new …\nFilters the vector, returns elements matching the <code>filter</code> …\nCopies each element according <code>offsets</code> parameter.\nTake elements from the vector by the given indices.\nVector for primitive data types.\nBuilder to build a primitive vector.\nGet the inner arrow array.\nSlice the vector, returning a new vector.\nVector of strings.\nAll slots are null.\nAll slots are valid.\nWhether the array slot is valid or not (null).\nValidity of a vector.\nReturns <code>Validity</code> that all elements are null.\nReturns <code>Validity</code> that all elements are valid.\nReturns the argument unchanged.\nCreates a <code>Validity</code> from <code>ArrayData</code>.\nCalls <code>U::from(self)</code>.\nReturns true if all bits are null.\nReturns true if all bits are valid.\nReturns whether <code>i-th</code> bit is set.\nThe number of null slots.")